{"version":3,"sources":["utils/vaultHelpers.ts","views/Vaults/components/VaultCard/DetailsSection.tsx","views/Vaults/components/VaultCard/CardHeading.tsx","hooks/useApproveVault.ts","hooks/useUnstakeVaults.ts","hooks/useStakeVaults.ts","views/Vaults/components/DepositModal.tsx","views/Vaults/components/WithdrawModal.tsx","views/Vaults/components/VaultCard/StakeAction.tsx","views/Vaults/components/VaultCard/CardActionsContainer.tsx","views/Vaults/components/VaultCard/ApyButton.tsx","views/Vaults/components/VaultCard/VaultCard.tsx","views/Vaults/components/VaultTable/Apr.tsx","views/Vaults/components/VaultTable/Vault.tsx","views/Vaults/components/VaultTable/Details.tsx","views/Vaults/components/VaultTable/Liquidity.tsx","views/Vaults/components/VaultTable/Actions/styles.ts","views/Vaults/components/VaultTable/Actions/StakedAction.tsx","views/Vaults/components/VaultTable/Actions/ActionPanel.tsx","views/Vaults/components/VaultTable/CellLayout.tsx","views/Vaults/components/types.ts","views/Vaults/components/VaultTable/Row.tsx","views/Vaults/components/VaultTable/VaultTable.tsx","views/Vaults/components/VaultTabButtons/index.tsx","views/Vaults/Vaults.tsx"],"names":["isArchivedPid","pid","Wrapper","styled","div","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","t","useTranslation","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","isTokenOnly","flexDirection","split","ml","useApproveVault","lpContract","vaultAddress","callWithGasPrice","useCallWithGasPrice","onApprove","useCallback","ethers","constants","MaxUint256","tx","wait","receipt","status","useUnstakeVaults","vaultContract","getVaultContract","onUnstake","unstakeVault","useStakeVaults","onStake","stakeVault","txHash","console","info","DepositModal","onConfirm","onDismiss","tokenName","max","useToast","toastSuccess","toastError","useState","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","title","fontSize","Modal","onClick","disabled","error","style","alignSelf","WithdrawModal","val","setVal","valNumber","BigNumber","fullBalanceNumber","handleChange","e","currentTarget","validity","valid","value","replace","handleSelectMax","onSelectMax","onChange","inputTitle","isFinite","eq","gt","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","apr","displayApr","cakePrice","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","lpPrice","useLpTokenPrice","handleStake","fetchVaultUserDataAsync","pids","handleUnstake","displayBalance","stakedBalanceBigNumber","getBalanceAmount","lt","toFixed","ROUND_DOWN","useModal","onPresentDeposit","onPresentWithdraw","color","Balance","decimals","getBalanceNumber","times","unit","prefix","some","item","pathname","includes","mr","Action","CardActions","vault","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lpAddress","getAddress","isApproved","parseInt","toString","useERC20","handleApprove","bold","textTransform","pr","lpSymbol","mt","ConnectWalletButton","ApyLabelContainer","ApyButton","StyledCard","Card","VaultCardInnerContainer","ExpandingWrapper","theme","colors","cardBorder","VaultCard","showExpandableSection","setShowExpandableSection","liquidity","isGreaterThanOrEqualTo","toNumber","toLocaleString","undefined","maximumFractionDigits","toUpperCase","isPromotedVault","tokenSymbol","isActive","quoteTokenSymbol","display","CardActionsContainer","ExpandableSectionButton","expanded","getBscScanLink","Container","text","textSubtle","AprWrapper","Apr","originalValue","mediaQueries","sm","TokenWrapper","Vault","label","useVaultUser","rawStakedBalance","primary","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","LiquidityWrapper","lg","Liquidity","displayLiquidity","Number","ActionContainer","input","xl","ActionTitles","ActionContent","Staked","userDataReady","log","usePriceMariachiDoge","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","background","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","vaultDetails","bsc","StakedAction","Label","ContentContainer","CellLayout","children","MobileVaultColumnSchema","id","name","sortable","DesktopVaultColumnSchema","cells","CellInner","StyledTr","tr","AprMobileCell","td","VaultMobileCell","Row","props","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isMobile","tableSchema","columnNames","map","column","data","Object","keys","key","columnIndex","indexOf","React","createElement","handleRenderRow","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","VaultTable","tableWrapperEl","useRef","columns","rows","useTable","sortColumn","ref","row","original","current","scrollIntoView","behavior","VaultTabButtons","activeIndex","hasStakeInFinishedVaults","url","useRouteMatch","scale","as","Link","to","show","ControlContainer","ToggleWrapper","Text","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","getDisplayApr","cakeRewardsApr","Vaults","path","vaultsLP","useVaults","dogePrice","usePriceDogeUSDC","query","setQuery","viewMode","ViewMode","TABLE","sortOption","setSortOption","fastRefresh","useRefresh","isArchived","isInactive","useUserVaultStakedOnly","stakedOnly","setStakedOnly","activeVaults","filter","inactiveVaults","archivedVaults","length","stakedOnlyVaults","isGreaterThan","stakedInactiveVaults","stakedArchivedVaults","vaultsList","vaultsToDisplay","vaultsToDisplayWithAPR","totalValue","cakeRewardPerYear","mariachiPerBlock","poolWeight","pow","BLOCKS_PER_YEAR","apy","tokenAmount","lpTotalInQuoteToken","QuoteToken","DOGE","MARIACHI","externalPid","valuePerLp","lpTotalSupply","totalLp","lpInVamp","plus","lpInMaster","comparedTo","parseFloat","lowercaseQuery","latinise","toLowerCase","chosenVaultsMemoized","chosenVaults","vaults","orderBy","slice","earnings","sortVaults","rowData","tokenAddresses","quoteTokenAdresses","tokenAddress","quoteTokenAddress","vaultContractAddress","vaultAddresses","PageHeader","Page","checked","Select","options","onOptionChange","option","marginLeft","SearchInput","event","target","placeholder","sort","a","b","exact","renderContent","src","alt"],"mappings":"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","file":"static/js/9.371b1d0c.chunk.js","sourcesContent":["const ARCHIVED_FARMS_START_PID = 139\nconst ARCHIVED_FARMS_END_PID = 250\n\nconst isArchivedPid = (pid: number) => pid >= ARCHIVED_FARMS_START_PID && pid <= ARCHIVED_FARMS_END_PID\n\nexport default isArchivedPid\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from 'uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && addLiquidityUrl && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Skeleton } from 'uikit'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  token: string\n  quoteToken: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage\n        variant=\"inverted\"\n        primaryToken={token}\n        secondaryToken={quoteToken}\n        isTokenOnly={false}\n        width={64}\n        height={64}\n      />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {multiplier ? (\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n          ) : (\n            <Skeleton ml=\"4px\" width={42} height={28} />\n          )}\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveVault = (lpContract: Contract, vaultAddress: string) => {\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    const tx = await callWithGasPrice(lpContract, 'approve', [vaultAddress, ethers.constants.MaxUint256])\n    const receipt = await tx.wait()\n    return receipt.status\n  }, [lpContract, vaultAddress, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveVault\n","import { useCallback } from 'react'\r\nimport { unstakeVault } from 'utils/calls'\r\nimport { getVaultContract } from 'utils/contractHelpers'\r\n\r\nconst useUnstakeVaults = (vaultAddress: string) => {\r\n  const vaultContract = getVaultContract(vaultAddress)\r\n\r\n  const handleUnstake = useCallback(\r\n    async () => {\r\n      await unstakeVault(vaultContract)\r\n    },\r\n    [vaultContract],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakeVaults\r\n","import { useCallback } from 'react'\r\nimport { stakeVault } from 'utils/calls'\r\nimport { getVaultContract } from 'utils/contractHelpers'\r\n\r\nconst useStakeVaults = (vaultAddress: string) => {\r\n  const vaultContract = getVaultContract(vaultAddress)\r\n\r\n  const handleStake = useCallback(\r\n    async () => {\r\n      const txHash = await stakeVault(vaultContract)\r\n      console.info(txHash)\r\n    },\r\n    [vaultContract],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakeVaults\r\n","import React, { useMemo, useState } from 'react'\nimport { Text, Button, Modal, LinkExternal } from 'uikit'\nimport { ModalActions } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  lpLabel?: string\n  onConfirm: () => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ onConfirm, onDismiss, tokenName = '', addLiquidityUrl, max }) => {\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  return (\n    <Modal title=\"Stake Tokens\" onDismiss={onDismiss}>\n      <Text fontSize=\"16px\">You will stake into the vault:</Text>\n      <Text fontSize=\"16px\">\n        `${fullBalance} {tokenName} LPs`\n      </Text>\n\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm()\n              toastSuccess(t('Staked!'), 'Your funds have been staked in the vault')\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from 'uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchVaultUserDataAsync } from 'state/vaults'\nimport { useLpTokenPrice } from 'state/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport useUnstakeVaults from 'hooks/useUnstakeVaults'\nimport useStakeVaults from 'hooks/useStakeVaults'\nimport { useAppDispatch } from 'state'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface VaultCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n  isTokenOnly?: boolean\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<VaultCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel,\n  isTokenOnly,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeVaults('empty')\n  const { onUnstake } = useUnstakeVaults('empty')\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async () => {\n    await onStake()\n    dispatch(fetchVaultUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async () => {\n    await onUnstake()\n    dispatch(fetchVaultUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001'\n    }\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      lpLabel={lpLabel}\n      addLiquidityUrl={addLiquidityUrl}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={(stakedBalance as BigNumber).eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from 'uikit'\nimport useApproveVault from 'hooks/useApproveVault'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchVaultUserDataAsync } from 'state/vaults'\nimport { Vault } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC20 } from 'hooks/useContract'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport StakeAction from './StakeAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface VaultWithStakedValue extends Vault {\n  apr?: number\n}\n\ninterface VaultCardActionsProps {\n  vault: VaultWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst CardActions: React.FC<VaultCardActionsProps> = ({ vault, account, addLiquidityUrl, cakePrice, lpLabel }) => {\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = vault\n  const { allowance, tokenBalance, stakedBalance } = vault.userData || {}\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && parseInt(allowance.toString()) > 0\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveVault(lpContract, 'empty')\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchVaultUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={vault.lpSymbol}\n        pid={pid}\n        apr={vault.apr}\n        lpLabel={lpLabel}\n        cakePrice={cakePrice}\n        addLiquidityUrl={addLiquidityUrl}\n        isTokenOnly={vault.isTokenOnly}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          MARIACHI\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {vault.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex } from 'uikit'\n\nconst ApyLabelContainer = styled(Flex)`\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport interface ApyButtonProps {\n  displayApr?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ displayApr }) => (\n  <ApyLabelContainer alignItems=\"center\">\n    {displayApr}%\n  </ApyLabelContainer>\n)\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from 'uikit'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { Vault } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface VaultWithStakedValue extends Vault {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nconst VaultCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  overflow: hidden;\n`\n\ninterface VaultCardProps {\n  vault: VaultWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst VaultCard: React.FC<VaultCardProps> = ({ vault, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    vault.liquidity && vault.liquidity.isGreaterThanOrEqualTo(0)\n      ? `$${vault.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = vault.lpSymbol && vault.lpSymbol.toUpperCase().replace('PANCAKE', '')\n\n  const lpAddress = getAddress(vault.lpAddresses)\n  const isPromotedVault = vault.tokenSymbol === 'CAKE'\n\n  return (\n    <StyledCard isActive={isPromotedVault}>\n      <VaultCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={vault.multiplier}\n          token={vault.tokenSymbol}\n          quoteToken={vault.quoteTokenSymbol}\n        />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{t('APY')}:</Text>\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n              {vault.apr ? <ApyButton displayApr={displayApr} /> : <Skeleton height={24} width={80} />}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Earn')}:</Text>\n          <Text bold>MARIACHI</Text>\n        </Flex>\n        <CardActionsContainer vault={vault} lpLabel={lpLabel} account={account} cakePrice={cakePrice} />\n      </VaultCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default VaultCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Vaults/components/VaultCard/ApyButton'\nimport { Skeleton } from 'uikit'\n\nexport interface AprProps {\n  value: string\n  originalValue: number\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  originalValue,\n}) => {\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <ApyButton displayApr={value} />\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from 'uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenPairImage } from 'components/TokenImage'\nimport { useVaultUser } from 'state/hooks'\n\nexport interface VaultProps {\n  label: string\n  pid: number\n  token: string\n  quoteToken: string\n  vaultAddress: string\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Vault: React.FunctionComponent<VaultProps> = ({ token, quoteToken, label, pid, vaultAddress }) => {\n  const { stakedBalance } = useVaultUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderVaulting = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Vaulting')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage\n          variant=\"inverted\"\n          primaryToken={token}\n          secondaryToken={quoteToken}\n          isTokenOnly={false}\n          width={40}\n          height={40}\n        />\n      </TokenWrapper>\n      <div>\n        {handleRenderVaulting()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Vault\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Container>\n      {!isDesktop && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Skeleton } from 'uikit'\nimport BigNumber from 'bignumber.js'\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.isGreaterThanOrEqualTo(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from 'uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { fetchVaultUserDataAsync } from 'state/vaults'\nimport { VaultWithStakedValue } from 'views/Vaults/components/VaultCard/VaultCard'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC20 } from 'hooks/useContract'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeVaults from 'hooks/useUnstakeVaults'\nimport useStakeVaults from 'hooks/useStakeVaults'\nimport useApproveVault from 'hooks/useApproveVault'\nimport { useAppDispatch } from 'state'\nimport { useVaultUser, usePriceMariachiDoge, useLpTokenPrice } from 'state/hooks'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends VaultWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n  isTokenOnly?: boolean\n  userData?: any\n  vaultAddress: string\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  userDataReady,\n  displayApr,\n  isTokenOnly,\n  userData,\n  vaultAddress,\n}) => {\n  const { t } = useTranslation()\n  console.log(vaultAddress, pid)\n  const { toastError } = useToast()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { stakedBalance, tokenBalance, allowance } = useVaultUser(pid)\n  const { onStake } = useStakeVaults(vaultAddress)\n  const { onUnstake } = useUnstakeVaults(vaultAddress)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const cakePrice = usePriceMariachiDoge()\n  const isApproved = account && allowance && parseInt(allowance.toString()) > 0\n\n  const lpAddress = getAddress(lpAddresses)\n\n  const handleStake = async () => {\n    await onStake()\n    dispatch(fetchVaultUserDataAsync({ account }))\n  }\n\n  const handleUnstake = async () => {\n    await onUnstake()\n    dispatch(fetchVaultUserDataAsync({ account }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(new BigNumber(stakedBalance))\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(new BigNumber(stakedBalance)).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} lpLabel={lpLabel} onConfirm={handleStake} tokenName={lpSymbol} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={new BigNumber(stakedBalance)} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveVault(lpContract, vaultAddress)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchVaultUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Vaulting')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (new BigNumber(stakedBalance).gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {new BigNumber(stakedBalance).gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(new BigNumber(stakedBalance)))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake')}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Vaulting')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Vault')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from 'uikit'\nimport { VaultWithStakedValue } from 'views/Vaults/components/VaultCard/VaultCard'\nimport { getAddress } from 'utils/addressHelpers'\n\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\nimport { VaultProps } from '../Vault'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  liquidity: LiquidityProps\n  vault: VaultProps\n  details: VaultWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  liquidity,\n  userDataReady,\n  expanded,\n  vault,\n}) => {\n  const vaultDetails = details\n\n  const { t } = useTranslation()\n  const lpLabel = vaultDetails.lpSymbol && vaultDetails.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const lpAddress = getAddress(vaultDetails.lpAddresses)\n  const bsc = `https://explorer.dogechain.dog/address/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>APY</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <StakedAction {...vaultDetails} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} vaultAddress={vault.vaultAddress} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileVaultColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'vault',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'apr',\n    sortable: true,\n    label: 'APY',\n  },\n  {\n    id: 4,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopVaultColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'vault',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'apr',\n    sortable: true,\n    label: 'APY',\n  },\n  {\n    id: 3,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 4,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { VaultWithStakedValue } from 'views/Vaults/components/VaultCard/VaultCard'\nimport { useMatchBreakpoints } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useVaultUser } from 'state/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Vault, { VaultProps } from './Vault'\nimport Details from './Details'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopVaultColumnSchema, MobileVaultColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  vault: VaultProps\n  liquidity: LiquidityProps\n  details: VaultWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  vault: Vault,\n  details: Details,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst VaultMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady, apr, vault, liquidity } = props\n  const hasStakedAmount = !!useVaultUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isDesktop, isMobile } = useMatchBreakpoints()\n\n  const isSmallerScreen = !isDesktop\n  const tableSchema = isSmallerScreen ? MobileVaultColumnSchema : DesktopVaultColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n  const handleRenderRow = () => {\n    const data = {\n      liquidity,\n      vault,\n      apr,\n      details,\n    }\n    if (!isMobile) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label=\"APY\">\n                        <Apr {...apr} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...data[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <VaultMobileCell>\n              <CellLayout>\n                <Vault {...vault} />\n              </CellLayout>\n            </VaultMobileCell>\n          </tr>\n          <tr>\n            <AprMobileCell>\n              <CellLayout label=\"APY\">\n                <Apr {...apr} />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n  scroll-margin-top: 64px;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst VaultTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'vault' })\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container id=\"vaults-table\">\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default VaultTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface VaultTabButtonsProps {\n  hasStakeInFinishedVaults: boolean\n}\n\nconst VaultTabButtons: React.FC<VaultTabButtonsProps> = ({ hasStakeInFinishedVaults }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/vaults':\n      activeIndex = 0\n      break\n    case '/vaults/history':\n      activeIndex = 1\n      break\n    case '/vaults/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedVaults}>\n          <ButtonMenuItem id=\"finished-vaults-button\" as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default VaultTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React, { useEffect, useCallback, useState, useMemo } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from 'uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport { QuoteToken } from 'config/constants/types'\nimport { Vault } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchVaultUserDataAsync } from 'state/vaults'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/vaultHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserVaultStakedOnly } from 'state/user/hooks'\nimport { useVaults, usePriceDogeUSDC, usePriceMariachiDoge } from 'state/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport VaultCard, { VaultWithStakedValue } from './components/VaultCard/VaultCard'\nimport Table from './components/VaultTable/VaultTable'\nimport VaultTabButtons from './components/VaultTabButtons'\nimport { RowProps } from './components/VaultTable/Row'\nimport { DesktopVaultColumnSchema } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst getDisplayApr = (cakeRewardsApr?: number) => {\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Vaults: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const vaultsLP = useVaults()\n  const cakePrice = usePriceMariachiDoge()\n  const dogePrice = usePriceDogeUSDC()\n  const [query, setQuery] = useState('')\n  const viewMode = ViewMode.TABLE\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchVaultUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n\n  const [stakedOnly, setStakedOnly] = useUserVaultStakedOnly(isActive)\n\n  const activeVaults = vaultsLP.filter(\n    (vault) => vault.pid !== 999 && vault.multiplier !== '0X' && !isArchivedPid(vault.pid),\n  )\n  const inactiveVaults = vaultsLP.filter(\n    (vault) => vault.pid !== 999 && vault.multiplier === '0X' && !isArchivedPid(vault.pid),\n  )\n  const archivedVaults = vaultsLP.filter((vault) => isArchivedPid(vault.pid))\n\n  const userDataReady = !account || activeVaults.length > 0\n\n  const stakedOnlyVaults = activeVaults.filter(\n    (vault) => vault.userData && new BigNumber(vault.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveVaults = inactiveVaults.filter(\n    (vault) => vault.userData && new BigNumber(vault.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedVaults = archivedVaults.filter(\n    (vault) => vault.userData && new BigNumber(vault.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const vaultsList = useCallback(\n    (vaultsToDisplay: Vault[]): VaultWithStakedValue[] => {\n      let vaultsToDisplayWithAPR: VaultWithStakedValue[] = vaultsToDisplay.map((vault) => {\n        const cakeRewardPerBlock = new BigNumber(vault.mariachiPerBlock || 1)\n          .times(new BigNumber(vault.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue\n        if (vault.isTokenOnly && vault.tokenAmount) {\n          totalValue = new BigNumber(vault.tokenAmount).times(cakePrice)\n        } else {\n          totalValue = new BigNumber(vault.lpTotalInQuoteToken || 0)\n\n          if (vault.quoteTokenSymbol === QuoteToken.DOGE) {\n            totalValue = totalValue.times(dogePrice)\n          } else if (vault.quoteTokenSymbol === QuoteToken.MARIACHI) {\n            totalValue = totalValue.times(cakePrice)\n          }\n\n          if (vault.externalPid) {\n            const valuePerLp = totalValue.div(new BigNumber(vault.lpTotalSupply).div(new BigNumber(10).pow(18)))\n            const totalLp = new BigNumber(vault.lpInVamp).plus(new BigNumber(vault.lpInMaster))\n            totalValue = valuePerLp.times(totalLp)\n          }\n        }\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...vault, apr: parseFloat(apy.toString()), liquidity: totalValue }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        vaultsToDisplayWithAPR = vaultsToDisplayWithAPR.filter((vault: VaultWithStakedValue) => {\n          return latinise(vault.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return vaultsToDisplayWithAPR\n    },\n    [cakePrice, dogePrice, query],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const chosenVaultsMemoized = useMemo(() => {\n    let chosenVaults = []\n\n    const sortVaults = (vaults: VaultWithStakedValue[]): VaultWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(vaults, (vault: VaultWithStakedValue) => vault.apr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            vaults,\n            (vault: VaultWithStakedValue) => (vault.multiplier ? Number(vault.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            vaults,\n            (vault: VaultWithStakedValue) => (vault.userData ? Number(vault.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(vaults, (vault: VaultWithStakedValue) => Number(vault.liquidity), 'desc')\n        default:\n          return vaults\n      }\n    }\n\n    if (isActive) {\n      chosenVaults = stakedOnly ? vaultsList(stakedOnlyVaults) : vaultsList(activeVaults)\n    }\n    if (isInactive) {\n      chosenVaults = stakedOnly ? vaultsList(stakedInactiveVaults) : vaultsList(inactiveVaults)\n    }\n    if (isArchived) {\n      chosenVaults = stakedOnly ? vaultsList(stakedArchivedVaults) : vaultsList(archivedVaults)\n    }\n    return sortVaults(chosenVaults)\n  }, [\n    sortOption,\n    activeVaults,\n    vaultsList,\n    inactiveVaults,\n    archivedVaults,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedVaults,\n    stakedInactiveVaults,\n    stakedOnly,\n    stakedOnlyVaults,\n  ])\n\n  const rowData = chosenVaultsMemoized.map((vault) => {\n    const { tokenAddresses, quoteTokenAdresses } = vault\n    const tokenAddress = tokenAddresses[2000]\n    const quoteTokenAddress = quoteTokenAdresses[2000]\n    const vaultContractAddress = vault.vaultAddresses[2000]\n    const lpLabel = vault.lpSymbol && vault.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(vault.apr),\n        originalValue: vault.apr,\n      },\n      vault: {\n        label: lpLabel,\n        pid: vault.pid,\n        token: tokenAddress,\n        quoteToken: quoteTokenAddress,\n        vaultAddress: vaultContractAddress,\n      },\n      liquidity: {\n        liquidity: vault.liquidity,\n      },\n      details: vault,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopVaultColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'vault':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenVaultsMemoized.map((vault) => (\n            <VaultCard\n              key={vault.pid}\n              vault={vault}\n              displayApr={getDisplayApr(vault.apr)}\n              cakePrice={new BigNumber(cakePrice)}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenVaultsMemoized.map((vault) => (\n            <VaultCard\n              key={vault.pid}\n              vault={vault}\n              displayApr={getDisplayApr(vault.apr)}\n              cakePrice={new BigNumber(cakePrice)}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenVaultsMemoized.map((vault) => (\n            <VaultCard\n              key={vault.pid}\n              vault={vault}\n              displayApr={getDisplayApr(vault.apr)}\n              cakePrice={new BigNumber(cakePrice)}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Vaults')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Yield optimization for your favorite projects. ¡Qué picante!')}\n        </Heading>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleWrapper>\n              <Toggle\n                id=\"staked-only-vaults\"\n                checked={stakedOnly}\n                onChange={() => setStakedOnly(!stakedOnly)}\n                scale=\"sm\"\n              />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <VaultTabButtons hasStakeInFinishedVaults={stakedInactiveVaults.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onOptionChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Vaults\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Vaults\n"],"sourceRoot":""}