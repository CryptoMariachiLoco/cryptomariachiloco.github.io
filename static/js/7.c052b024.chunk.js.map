{"version":3,"sources":["components/RoiCalculatorModal/useRoiCalculatorReducer.ts","utils/farmHelpers.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useApproveFarm.ts","hooks/useUnstakeFarms.ts","hooks/useStakeFarms.ts","utils/compoundApyHelpers.ts","components/RoiCalculatorModal/RoiCalculatorFooter.tsx","components/RoiCalculatorModal/RoiCard.tsx","components/RoiCalculatorModal/AnimatedArrow.tsx","components/RoiCalculatorModal/index.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/Farms.tsx"],"names":["EditingCurrency","CalculatorMode","isArchivedPid","pid","Wrapper","styled","div","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","t","useTranslation","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","isTokenOnly","flexDirection","split","ml","useApproveFarm","lpContract","masterChefContract","useMasterchef","callWithGasPrice","useCallWithGasPrice","onApprove","useCallback","address","ethers","constants","MaxUint256","tx","wait","receipt","status","useUnstakeFarms","handleUnstake","amount","unstakeFarm","onUnstake","useStakeFarms","handleStake","stakeFarm","txHash","console","info","onStake","DAYS_TO_CALCULATE_AGAINST","getInterestBreakdown","principalInUSD","apr","earningTokenPrice","compoundFrequency","performanceFee","timesCompounded","aprAsDecimal","roundingDecimalsNew","Math","round","map","days","daysAsDecimalOfYear","principal","interestEarned","parseFloat","toFixed","getApy","apyAsDecimal","performanceFeeAsDecimal","takenAsPerformanceFee","getRoi","amountEarned","amountInvested","Footer","theme","colors","dropdown","BulletList","ul","textSubtle","RoiCalculatorFooter","isFarm","displayApr","autoCompoundFrequency","linkLabel","linkHref","useState","isExpanded","setIsExpanded","useTooltip","my","placement","tooltipOffset","multiplierRef","targetRef","multiplierTooltip","tooltip","multiplierTooltipVisible","tooltipVisible","gridRowCount","apy","p","expanded","onClick","prev","px","gridTemplateColumns","gridRowGap","gridTemplateRows","color","small","textAlign","compoundTimes","mr","ref","fontSize","display","mt","fee","compoundingIndexToFrequency","initialState","controls","compounding","compoundingFrequency","activeCompoundingIndex","stakingDuration","mode","ROI_BASED_ON_PRINCIPAL","editingCurrency","USD","data","principalAsToken","principalAsUSD","roiUSD","roiTokens","roiPercentage","roiCalculatorReducer","state","action","type","payload","toggledCompounding","index","PRINCIPAL_BASED_ON_ROI","currencyAfterChange","TOKEN","useRoiCalculatorReducer","stakingTokenPrice","useReducer","dispatch","useEffect","principalInUSDAsNumber","interestBreakdown","hasInterest","Number","isNaN","roiAsUSD","principalForExpectedRoi","interest","getPrincipalForInterest","principalUSD","principalToken","BigNumber","setPrincipalFromUSDValue","principalAsTokenBN","gt","setPrincipalFromTokenValue","principalAsUsdBN","times","principalAsUsdString","setStakingDuration","stakingDurationIndex","toggleCompounding","toggleEditingCurrency","setCompoundingFrequency","setCalculatorMode","modeToSet","setTargetRoi","targetRoiAsTokens","toNumber","MILLION","RoiCardWrapper","Box","radii","default","RoiCardInner","gradients","bubblegum","RoiInputContainer","RoiDisplayContainer","RoiDollarAmount","Text","fadeOut","background","RoiCard","earningTokenSymbol","calculatorState","expectedRoi","setExpectedRoi","inputRef","useRef","current","focus","onEnterEditing","toLocaleString","minimumFractionDigits","maximumFractionDigits","bold","textTransform","inputMode","pattern","scale","value","placeholder","onChange","event","currentTarget","validity","valid","roiAsString","target","replace","rotate","keyframes","ArrowContainer","primary","AnimatedArrow","key","setKey","prevKey","prevId","parseInt","StyledModal","Modal","ScrollableContainer","mediaQueries","sm","FullWidthButtonMenu","ButtonMenu","disabled","RoiCalculatorModal","onDismiss","onBack","stakingTokenBalance","stakingTokenSymbol","initialValue","account","useActiveWeb3React","balanceInputRef","assetSymbol","editingUnit","editingValue","conversionUnit","conversionValue","onUserInput","title","headerBackground","asset","currencyValue","innerRef","unit","switchEditingUnits","onFocus","lte","getBalanceNumber","toString","toLocaleUpperCase","activeIndex","onItemClick","flex","checked","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","max","stakedBalance","onConfirm","tokenName","lpPrice","cakePrice","referral","val","setVal","valAddress","setValAddress","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","useMemo","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","annualRoi","formattedAnnualRoi","formatNumber","handleChange","e","handleChangeAddress","handleSelectMax","plus","onSelectMax","inputTitle","isFinite","eq","error","style","alignSelf","WithdrawModal","valNumber","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","useAppDispatch","useWeb3React","useLpTokenPrice","fetchFarmUserDataAsync","pids","displayBalance","stakedBalanceBigNumber","getBalanceAmount","lt","ROUND_DOWN","useModal","onPresentDeposit","onPresentWithdraw","Balance","decimals","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceMariachiDoge","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lpAddress","getAddress","isApproved","useERC20","handleApprove","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","stopPropagation","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","isGreaterThanOrEqualTo","undefined","toUpperCase","isPromotedFarm","tokenSymbol","isActive","quoteTokenSymbol","CardActionsContainer","ExpandableSectionButton","getBscScanLink","Container","text","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","input","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","groupInfo","marginBottom","marginTop","expandAnimation","collapseAnimation","css","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","children","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","props","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","columnIndex","indexOf","React","createElement","handleRenderRow","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","getDisplayApr","cakeRewardsApr","Farms","path","farmsLP","useFarms","dogePrice","usePriceDogeUSDC","query","setQuery","viewMode","ViewMode","TABLE","sortOption","setSortOption","fastRefresh","useRefresh","isArchived","isInactive","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","inactiveFarms","archivedFarms","length","stakedOnlyFarms","isGreaterThan","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","totalValue","cakeRewardPerYear","mariachiPerBlock","poolWeight","pow","BLOCKS_PER_YEAR","tokenAmount","lpTotalInQuoteToken","QuoteToken","DOGE","MARIACHI","externalPid","valuePerLp","lpTotalSupply","totalLp","lpInVamp","lpInMaster","comparedTo","lowercaseQuery","latinise","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","rowData","tokenAddresses","quoteTokenAdresses","tokenAddress","quoteTokenAddress","PageHeader","Page","Select","options","onOptionChange","option","marginLeft","SearchInput","sort","a","b","exact","renderContent","src","alt"],"mappings":"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","file":"static/js/7.c052b024.chunk.js","sourcesContent":["import { useEffect, useReducer, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { getInterestBreakdown, getPrincipalForInterest, getRoi } from 'utils/compoundApyHelpers'\n\n/**\n * This hook is handling all the calculator state and calculations.\n * UI connected to it is merely representation of the data and buttons to trigger actions\n */\n\n// Mapping from the compounding frequency button index to actual compounding frequency\n// in number of compounds per day\nconst compoundingIndexToFrequency = {\n  0: 1,\n  1: 0.142857142,\n  2: 0.071428571, // once every 7 days\n  3: 0.033333333, // once every 30 days\n}\n\nconst TOKEN_PRECISION = 10\nconst USD_PRECISION = 2\n\n// Used to track/react which currency user is editing (i.e. USD amount or Token amount)\nexport enum EditingCurrency {\n  TOKEN,\n  USD,\n}\n\n// Calculator works in 2 modes\nexport enum CalculatorMode {\n  ROI_BASED_ON_PRINCIPAL, // User edits principal value and sees what ROI they get\n  PRINCIPAL_BASED_ON_ROI, // User edits ROI value and sees what principal they need to invest to reach it\n}\n\nexport interface RoiCalculatorReducerState {\n  controls: {\n    compounding: boolean // Compounding checkbox state\n    compoundingFrequency: number // Compounding frequency in number of compounds per day\n    activeCompoundingIndex: number // index of active compounding button in ButtonMenu\n    stakingDuration: number // index of active staking duration button in ButtonMenu\n    mode: CalculatorMode\n    editingCurrency: EditingCurrency\n  }\n  data: {\n    principalAsToken: string // Used as value for Inputs\n    principalAsUSD: string // Used as value for Inputs\n    roiUSD: number\n    roiTokens: number\n    roiPercentage: number // ROI expressed in percentage relative to principal\n  }\n}\n\nconst initialState: RoiCalculatorReducerState = {\n  controls: {\n    compounding: true,\n    compoundingFrequency: 1, // how many compound in a day , e.g. 1 = once a day, 0.071 - once per 2 weeks\n    activeCompoundingIndex: 0, // active compounding selected in\n    stakingDuration: 3,\n    mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL,\n    editingCurrency: EditingCurrency.USD,\n  },\n  data: {\n    principalAsToken: '0.00',\n    principalAsUSD: '',\n    roiUSD: 0,\n    roiTokens: 0,\n    roiPercentage: 0,\n  },\n}\n\nconst roiCalculatorReducer = (\n  state: RoiCalculatorReducerState,\n  action: { type: string; payload?: any },\n): RoiCalculatorReducerState => {\n  switch (action.type) {\n    case 'setStakingDuration': {\n      const controls = { ...state.controls, stakingDuration: action.payload }\n      return {\n        ...state,\n        controls,\n      }\n    }\n    case 'toggleCompounding': {\n      const toggledCompounding = !state.controls.compounding\n      const controls = { ...state.controls, compounding: toggledCompounding }\n      return {\n        ...state,\n        controls,\n      }\n    }\n    case 'setCompoundingFrequency': {\n      const { index, autoCompoundFrequency } = action.payload\n      if (autoCompoundFrequency) {\n        return {\n          ...state,\n          controls: {\n            ...state.controls,\n            compoundingFrequency: autoCompoundFrequency,\n          },\n        }\n      }\n      const compoundingFrequency = compoundingIndexToFrequency[index]\n      const controls = { ...state.controls, compoundingFrequency, activeCompoundingIndex: index }\n      return {\n        ...state,\n        controls,\n      }\n    }\n    case 'setPrincipal': {\n      const { principalAsUSD, principalAsToken } = action.payload\n      const data = { ...state.data, principalAsUSD, principalAsToken }\n      const controls = { ...state.controls, mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL }\n      return {\n        controls,\n        data,\n      }\n    }\n    case 'setPrincipalForTargetRoi': {\n      const { principalAsUSD, principalAsToken, roiPercentage } = action.payload\n      const data = { ...state.data, principalAsUSD, principalAsToken, roiPercentage }\n      return {\n        ...state,\n        data,\n      }\n    }\n    case 'setCalculatorMode': {\n      const mode = action.payload\n      const controls = { ...state.controls, mode }\n      if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\n        const roiUSD = parseFloat(state.data.roiUSD.toFixed(USD_PRECISION))\n        const data = { ...state.data, roiUSD }\n        return { controls, data }\n      }\n      return { ...state, controls }\n    }\n    case 'setRoi': {\n      const data = { ...state.data, ...action.payload }\n      return { ...state, data }\n    }\n    case 'setTargetRoi': {\n      const { roiUSD, roiTokens } = action.payload\n      const data = { ...state.data, roiUSD, roiTokens }\n      const controls = { ...state.controls, mode: CalculatorMode.PRINCIPAL_BASED_ON_ROI }\n      return { controls, data }\n    }\n    case 'toggleEditingCurrency': {\n      const currencyAfterChange =\n        state.controls.editingCurrency === EditingCurrency.USD ? EditingCurrency.TOKEN : EditingCurrency.USD\n      const controls = { ...state.controls, editingCurrency: currencyAfterChange }\n      return { ...state, controls }\n    }\n    default:\n      return state\n  }\n}\n\nconst useRoiCalculatorReducer = (\n  stakingTokenPrice: number,\n  earningTokenPrice: number,\n  apr: number,\n  autoCompoundFrequency: number,\n  performanceFee: number,\n) => {\n  const [state, dispatch] = useReducer(roiCalculatorReducer, initialState)\n  const { principalAsUSD, roiUSD } = state.data\n  const { compounding, compoundingFrequency, stakingDuration, mode } = state.controls\n\n  // If pool is auto-compounding set state's compounding frequency to this pool's auto-compound frequency\n  useEffect(() => {\n    if (autoCompoundFrequency > 0) {\n      dispatch({ type: 'setCompoundingFrequency', payload: { autoCompoundFrequency } })\n    }\n  }, [autoCompoundFrequency])\n\n  // Calculates and sets ROI whenever related values change\n  useEffect(() => {\n    if (mode === CalculatorMode.ROI_BASED_ON_PRINCIPAL) {\n      const principalInUSDAsNumber = parseFloat(principalAsUSD)\n      const compoundFrequency = compounding ? compoundingFrequency : 0\n      const interestBreakdown = getInterestBreakdown({\n        principalInUSD: principalInUSDAsNumber,\n        apr,\n        earningTokenPrice,\n        compoundFrequency,\n        performanceFee,\n      })\n      const hasInterest = !Number.isNaN(interestBreakdown[stakingDuration])\n      const roiTokens = hasInterest ? interestBreakdown[stakingDuration] : 0\n      const roiAsUSD = hasInterest ? roiTokens * earningTokenPrice : 0\n      const roiPercentage = hasInterest\n        ? getRoi({\n            amountEarned: roiAsUSD,\n            amountInvested: principalInUSDAsNumber,\n          })\n        : 0\n      dispatch({ type: 'setRoi', payload: { roiUSD: roiAsUSD, roiTokens, roiPercentage } })\n    }\n  }, [principalAsUSD, apr, stakingDuration, earningTokenPrice, performanceFee, compounding, compoundingFrequency, mode])\n\n  // Calculates and sets principal based on expected ROI value\n  useEffect(() => {\n    if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\n      const principalForExpectedRoi = getPrincipalForInterest(\n        roiUSD,\n        apr,\n        compounding ? compoundingFrequency : 0,\n        performanceFee,\n      )\n      const principalUSD = !Number.isNaN(principalForExpectedRoi[stakingDuration])\n        ? principalForExpectedRoi[stakingDuration]\n        : 0\n      const principalToken = new BigNumber(principalUSD).div(stakingTokenPrice)\n      const roiPercentage = getRoi({\n        amountEarned: roiUSD,\n        amountInvested: principalUSD,\n      })\n      dispatch({\n        type: 'setPrincipalForTargetRoi',\n        payload: {\n          principalAsUSD: principalUSD.toFixed(USD_PRECISION),\n          principalAsToken: principalToken.toFixed(TOKEN_PRECISION),\n          roiPercentage,\n        },\n      })\n    }\n  }, [stakingDuration, apr, compounding, compoundingFrequency, mode, roiUSD, stakingTokenPrice, performanceFee])\n\n  // Handler for compounding frequency buttons\n  const setCompoundingFrequency = (index: number) => {\n    dispatch({ type: 'setCompoundingFrequency', payload: { index } })\n  }\n\n  // Handler for principal input when in USD mode\n  const setPrincipalFromUSDValue = (amount: string) => {\n    const principalAsTokenBN = new BigNumber(amount).div(stakingTokenPrice)\n    const principalAsToken = principalAsTokenBN.gt(0) ? principalAsTokenBN.toFixed(TOKEN_PRECISION) : '0.00'\n    dispatch({ type: 'setPrincipal', payload: { principalAsUSD: amount, principalAsToken } })\n  }\n\n  // Handler for principal input when in Token mode\n  const setPrincipalFromTokenValue = useCallback(\n    (amount: string) => {\n      const principalAsUsdBN = new BigNumber(amount).times(stakingTokenPrice)\n      const principalAsUsdString = principalAsUsdBN.gt(0) ? principalAsUsdBN.toFixed(USD_PRECISION) : '0.00'\n      dispatch({\n        type: 'setPrincipal',\n        payload: { principalAsUSD: principalAsUsdString, principalAsToken: amount },\n      })\n    },\n    [stakingTokenPrice],\n  )\n\n  // Handler for staking duration buttons\n  const setStakingDuration = (stakingDurationIndex: number) => {\n    dispatch({ type: 'setStakingDuration', payload: stakingDurationIndex })\n  }\n\n  // Handler for compounding checkbox\n  const toggleCompounding = () => {\n    dispatch({ type: 'toggleCompounding' })\n  }\n\n  // Handler for principal input mode switch\n  const toggleEditingCurrency = () => {\n    dispatch({ type: 'toggleEditingCurrency' })\n  }\n\n  const setCalculatorMode = (modeToSet: CalculatorMode) => {\n    dispatch({ type: 'setCalculatorMode', payload: modeToSet })\n  }\n\n  // Handler for ROI input\n  const setTargetRoi = (amount: string) => {\n    const targetRoiAsTokens = new BigNumber(amount).div(earningTokenPrice)\n    dispatch({\n      type: 'setTargetRoi',\n      payload: { roiUSD: +amount, roiTokens: targetRoiAsTokens.isNaN() ? 0 : targetRoiAsTokens.toNumber() },\n    })\n  }\n\n  return {\n    state,\n    setPrincipalFromUSDValue,\n    setPrincipalFromTokenValue,\n    setStakingDuration,\n    toggleCompounding,\n    toggleEditingCurrency,\n    setCompoundingFrequency,\n    setCalculatorMode,\n    setTargetRoi,\n  }\n}\n\nexport default useRoiCalculatorReducer\n","const ARCHIVED_FARMS_START_PID = 139\nconst ARCHIVED_FARMS_END_PID = 250\n\nconst isArchivedPid = (pid: number) => pid >= ARCHIVED_FARMS_START_PID && pid <= ARCHIVED_FARMS_END_PID\n\nexport default isArchivedPid\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from 'uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && addLiquidityUrl && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Skeleton } from 'uikit'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  token: string\n  quoteToken: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage\n        variant=\"inverted\"\n        primaryToken={token}\n        secondaryToken={quoteToken}\n        isTokenOnly={false}\n        width={64}\n        height={64}\n      />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {multiplier ? (\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n          ) : (\n            <Skeleton ml=\"4px\" width={42} height={28} />\n          )}\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    const tx = await callWithGasPrice(lpContract, 'approve', [masterChefContract.address, ethers.constants.MaxUint256])\n    const receipt = await tx.wait()\n    return receipt.status\n  }, [lpContract, masterChefContract, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, address: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount, address)\n      console.info(txHash)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","// 1 day, 7 days, 30 days, 1 year, 5 years\nconst DAYS_TO_CALCULATE_AGAINST = [1, 7, 30, 365, 1825]\n\n/**\n *\n * @param principalInUSD - amount user wants to invest in USD\n * @param apr - farm or pool apr as percentage. If its farm APR its only cake rewards APR without LP rewards APR\n * @param earningTokenPrice - price of reward token\n * @param compoundFrequency - how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @param performanceFee - performance fee as percentage\n * @returns an array of token values earned as interest, with each element representing interest earned over a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */\nexport const getInterestBreakdown = ({\n  principalInUSD,\n  apr,\n  earningTokenPrice,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}: {\n  principalInUSD: number\n  apr: number\n  earningTokenPrice: number\n  compoundFrequency?: number\n  performanceFee?: number\n}) => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const aprAsDecimal = apr / 100\n\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  // and also cause rounding errors\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0\n  const roundingDecimalsNew = isHighValueToken ? 5 : 3\n\n  return DAYS_TO_CALCULATE_AGAINST.map((days) => {\n    const daysAsDecimalOfYear = days / 365\n    // Calculate the starting TOKEN balance with a dollar balance of principalInUSD.\n    const principal = principalInUSD / earningTokenPrice\n    let interestEarned = principal * aprAsDecimal * (days / 365)\n    if (timesCompounded !== 0) {\n      // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n      const accruedAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n      // To get the TOKEN amount earned, deduct the amount after compounding (accruedAmount) from the starting TOKEN balance (principal)\n      interestEarned = accruedAmount - principal\n      if (performanceFee) {\n        const performanceFeeAsDecimal = performanceFee / 100\n        const performanceFeeAsAmount = interestEarned * performanceFeeAsDecimal\n        interestEarned -= performanceFeeAsAmount\n      }\n    }\n    return parseFloat(interestEarned.toFixed(roundingDecimalsNew))\n  })\n}\n\n/**\n * @param interest how much USD amount you aim to make\n * @param apr APR of farm/pool\n * @param compoundingFrequency how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @returns an array of principal values needed to reach target interest, with each element representing principal needed for a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */\nexport const getPrincipalForInterest = (\n  interest: number,\n  apr: number,\n  compoundingFrequency: number,\n  performanceFee = 0,\n) => {\n  return DAYS_TO_CALCULATE_AGAINST.map((days) => {\n    const apyAsDecimal = getApy(apr, compoundingFrequency, days, performanceFee)\n    // console.log('inside', interest, apyAsDecimal)\n    // const apyAsBN = new BigNumber(apyAsDecimal).decimalPlaces(6, BigNumber.ROUND_DOWN).toNumber()\n    return parseFloat((interest / apyAsDecimal).toFixed(2))\n  })\n}\n\n/**\n * Given APR returns APY\n * @param apr APR as percentage\n * @param compoundFrequency how many compounds per day\n * @param days if other than 365 adjusts (A)PY for period less than a year\n * @param performanceFee performance fee as percentage\n * @returns APY as decimal\n */\nexport const getApy = (apr: number, compoundFrequency = 1, days = 365, performanceFee = 0) => {\n  const daysAsDecimalOfYear = days / 365\n  const aprAsDecimal = apr / 100\n  const timesCompounded = 365 * compoundFrequency\n  let apyAsDecimal = (apr / 100) * daysAsDecimalOfYear\n  if (timesCompounded > 0) {\n    apyAsDecimal = (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear) - 1\n  }\n  if (performanceFee) {\n    const performanceFeeAsDecimal = performanceFee / 100\n    const takenAsPerformanceFee = apyAsDecimal * performanceFeeAsDecimal\n    apyAsDecimal -= takenAsPerformanceFee\n  }\n  return apyAsDecimal\n}\n\nexport const getRoi = ({ amountEarned, amountInvested }: { amountEarned: number; amountInvested: number }) => {\n  if (amountInvested === 0) {\n    return 0\n  }\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Box, Text, ExpandableLabel, LinkExternal, Grid, HelpIcon, useTooltip } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getApy } from 'utils/compoundApyHelpers'\n\nconst Footer = styled(Flex)`\n  width: 100%;\n  background: ${({ theme }) => theme.colors.dropdown};\n`\n\nconst BulletList = styled.ul`\n  list-style-type: none;\n  margin-top: 16px;\n  padding: 0;\n  li {\n    margin: 0;\n    padding: 0;\n  }\n  li::before {\n    content: '•';\n    margin-right: 4px;\n    color: ${({ theme }) => theme.colors.textSubtle};\n  }\n  li::marker {\n    font-size: 12px;\n  }\n`\n\ninterface RoiCalculatorFooterProps {\n  isFarm: boolean\n  apr: number\n  displayApr: string\n  autoCompoundFrequency: number\n  multiplier: string\n  linkLabel: string\n  linkHref: string\n  performanceFee: number\n}\n\nconst RoiCalculatorFooter: React.FC<RoiCalculatorFooterProps> = ({\n  isFarm,\n  apr,\n  displayApr,\n  autoCompoundFrequency,\n  multiplier,\n  linkLabel,\n  linkHref,\n  performanceFee,\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false)\n  const { t } = useTranslation()\n  const {\n    targetRef: multiplierRef,\n    tooltip: multiplierTooltip,\n    tooltipVisible: multiplierTooltipVisible,\n  } = useTooltip(\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of MARIACHI rewards each farm receives, as a proportion of the MARIACHI produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 MARIACHI per block, a 40x farm would receive 40 MARIACHI per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>,\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  const gridRowCount = isFarm ? 4 : 2\n  const apy = (getApy(apr, autoCompoundFrequency > 0 ? autoCompoundFrequency : 1, 365, performanceFee) * 100).toFixed(2)\n\n  return (\n    <Footer p=\"16px\" flexDirection=\"column\">\n      <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded((prev) => !prev)}>\n        {isExpanded ? t('Hide') : t('Details')}\n      </ExpandableLabel>\n      {isExpanded && (\n        <Box px=\"8px\">\n          <Grid gridTemplateColumns=\"2.5fr 1fr\" gridRowGap=\"8px\" gridTemplateRows={`repeat(${gridRowCount}, auto)`}>\n            {isFarm && (\n              <>\n                <Text color=\"textSubtle\" small>\n                  {t('APR (incl. LP rewards)')}\n                </Text>\n                <Text small textAlign=\"right\">\n                  {displayApr}%\n                </Text>\n              </>\n            )}\n            <Text color=\"textSubtle\" small>\n              {isFarm ? t('Base APR (MARIACHI yield only)') : t('APR')}\n            </Text>\n            <Text small textAlign=\"right\">\n              {apr.toFixed(2)}%\n            </Text>\n            <Text color=\"textSubtle\" small>\n              {t('APY (%compoundTimes%x daily compound)', {\n                compoundTimes: autoCompoundFrequency > 0 ? autoCompoundFrequency : 1,\n              })}\n            </Text>\n            <Text small textAlign=\"right\">\n              {apy}%\n            </Text>\n            {isFarm && (\n              <>\n                <Text color=\"textSubtle\" small>\n                  {t('Farm Multiplier')}\n                </Text>\n                <Flex justifyContent=\"flex-end\" alignItems=\"flex-end\">\n                  <Text small textAlign=\"right\" mr=\"4px\">\n                    {multiplier}\n                  </Text>\n                  <span ref={multiplierRef}>\n                    <HelpIcon color=\"textSubtle\" width=\"16px\" height=\"16px\" />\n                  </span>\n                  {multiplierTooltipVisible && multiplierTooltip}\n                </Flex>\n              </>\n            )}\n          </Grid>\n          <BulletList>\n            <li>\n              <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\n                {t('Calculated based on current rates.')}\n              </Text>\n            </li>\n            {isFarm && (\n              <li>\n                <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\n                  {t('LP rewards: 0.17% trading fees, distributed proportionally among LP token holders.')}\n                </Text>\n              </li>\n            )}\n            <li>\n              <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\n                {t(\n                  'All figures are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n                )}\n              </Text>\n            </li>\n            {performanceFee > 0 && (\n              <li>\n                <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\n                  {t('All estimated rates take into account this pool’s %fee%% performance fee', {\n                    fee: performanceFee,\n                  })}\n                </Text>\n              </li>\n            )}\n          </BulletList>\n          <Flex justifyContent=\"center\" mt=\"24px\">\n            <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n          </Flex>\n        </Box>\n      )}\n    </Footer>\n  )\n}\n\nexport default RoiCalculatorFooter\n","import React, { useRef, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Text, Input, CheckmarkIcon, PencilIcon, IconButton } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { CalculatorMode, RoiCalculatorReducerState } from './useRoiCalculatorReducer'\n\nconst MILLION = 1000000\nconst TRILLION = 1000000000000\n\nconst RoiCardWrapper = styled(Box)`\n  background: linear-gradient(180deg, #53dee9, #7645d9);\n  padding: 1px;\n  width: 100%;\n  border-radius: ${({ theme }) => theme.radii.default};\n`\n\nconst RoiCardInner = styled(Box)`\n  height: 120px;\n  padding: 24px;\n  border-radius: ${({ theme }) => theme.radii.default};\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n`\n\nconst RoiInputContainer = styled(Box)`\n  position: relative;\n  & > input {\n    padding-left: 28px;\n    max-width: 70%;\n  }\n  &:before {\n    position: absolute;\n    content: '$';\n    color: ${({ theme }) => theme.colors.textSubtle};\n    left: 16px;\n    top: 8px;\n  }\n`\n\nconst RoiDisplayContainer = styled(Flex)`\n  max-width: 82%;\n  margin-right: 8px;\n`\n\nconst RoiDollarAmount = styled(Text)<{ fadeOut: boolean }>`\n  position: relative;\n  overflow-x: auto;\n  &::-webkit-scrollbar {\n    height: 0px;\n  }\n\n  ${({ fadeOut, theme }) =>\n    fadeOut &&\n    `\n      &:after {\n        background: linear-gradient(\n          to right,\n          ${theme.colors.background}00,\n          ${theme.colors.background}E6\n        );\n        content: '';\n        height: 100%;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: 0;\n        width: 40px;\n      }\n  `}\n`\n\ninterface RoiCardProps {\n  earningTokenSymbol: string\n  calculatorState: RoiCalculatorReducerState\n  setTargetRoi: (amount: string) => void\n  setCalculatorMode: (mode: CalculatorMode) => void\n}\n\nconst RoiCard: React.FC<RoiCardProps> = ({ earningTokenSymbol, calculatorState, setTargetRoi, setCalculatorMode }) => {\n  const [expectedRoi, setExpectedRoi] = useState('')\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const { roiUSD, roiTokens, roiPercentage } = calculatorState.data\n  const { mode } = calculatorState.controls\n\n  const { t } = useTranslation()\n\n  useEffect(() => {\n    if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI && inputRef.current) {\n      inputRef.current.focus()\n    }\n  }, [mode])\n\n  const onEnterEditing = () => {\n    setCalculatorMode(CalculatorMode.PRINCIPAL_BASED_ON_ROI)\n    setExpectedRoi(\n      roiUSD.toLocaleString('en', {\n        minimumFractionDigits: roiUSD > MILLION ? 0 : 2,\n        maximumFractionDigits: roiUSD > MILLION ? 0 : 2,\n      }),\n    )\n  }\n\n  const onExitRoiEditing = () => {\n    setCalculatorMode(CalculatorMode.ROI_BASED_ON_PRINCIPAL)\n  }\n  const handleExpectedRoiChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.currentTarget.validity.valid) {\n      const roiAsString = event.target.value.replace(/,/g, '.')\n      setTargetRoi(roiAsString)\n      setExpectedRoi(roiAsString)\n    }\n  }\n  return (\n    <RoiCardWrapper>\n      <RoiCardInner>\n        <Text fontSize=\"12px\" color=\"secondary\" bold textTransform=\"uppercase\">\n          {t('ROI at current rates')}\n        </Text>\n        <Flex justifyContent=\"space-between\" mt=\"4px\" height=\"36px\">\n          {mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI ? (\n            <>\n              <RoiInputContainer>\n                <Input\n                  ref={inputRef}\n                  type=\"text\"\n                  inputMode=\"decimal\"\n                  pattern=\"^[0-9]+[.,]?[0-9]*$\"\n                  scale=\"sm\"\n                  value={expectedRoi}\n                  placeholder=\"0.0\"\n                  onChange={handleExpectedRoiChange}\n                />\n              </RoiInputContainer>\n              <IconButton scale=\"sm\" variant=\"text\" onClick={onExitRoiEditing}>\n                <CheckmarkIcon color=\"primary\" />\n              </IconButton>\n            </>\n          ) : (\n            <>\n              <RoiDisplayContainer onClick={onEnterEditing}>\n                {/* Dollar sign is separate cause its not supposed to scroll with a number if number is huge */}\n                <Text fontSize=\"24px\" bold>\n                  $\n                </Text>\n                <RoiDollarAmount fontSize=\"24px\" bold fadeOut={roiUSD > TRILLION}>\n                  {roiUSD.toLocaleString('en', {\n                    minimumFractionDigits: roiUSD > MILLION ? 0 : 2,\n                    maximumFractionDigits: roiUSD > MILLION ? 0 : 2,\n                  })}\n                </RoiDollarAmount>\n              </RoiDisplayContainer>\n              <IconButton scale=\"sm\" variant=\"text\" onClick={onEnterEditing}>\n                <PencilIcon color=\"primary\" />\n              </IconButton>\n            </>\n          )}\n        </Flex>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          ~ {roiTokens} {earningTokenSymbol} (\n          {roiPercentage.toLocaleString('en', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n          %)\n        </Text>\n      </RoiCardInner>\n    </RoiCardWrapper>\n  )\n}\n\nexport default RoiCard\n","import React, { useState, useEffect } from 'react'\nimport { Flex, ArrowDownIcon, ArrowUpIcon } from 'uikit'\nimport styled, { keyframes } from 'styled-components'\nimport { CalculatorMode, RoiCalculatorReducerState } from './useRoiCalculatorReducer'\n\nconst rotate = keyframes`\n  0% {\n    transform: scale(1);\n    stroke-width: 0;\n  }\n  50% {\n    transform: scale(1.3);\n    stroke-width: 2;\n  }\n  100% {\n    transform: scale(1);\n    stroke-width: 0;\n  }\n`\n\nconst ArrowContainer = styled(Flex)`\n  & > svg {\n    animation: 0.2s ${rotate} linear;\n    stroke: ${({ theme }) => `${theme.colors.primary}3D`};\n    stroke-width: 0;\n  }\n`\n\ninterface AnimatedArrowProps {\n  calculatorState: RoiCalculatorReducerState\n}\n\nconst AnimatedArrow: React.FC<AnimatedArrowProps> = ({ calculatorState }) => {\n  const [key, setKey] = useState('roiArrow-0')\n  const { mode } = calculatorState.controls\n\n  // Trigger animation on state change\n  useEffect(() => {\n    setKey((prevKey) => {\n      const prevId = parseInt(prevKey.split('-')[1], 10)\n      return `roiArrow-${prevId + 1}`\n    })\n  }, [calculatorState])\n\n  return (\n    <ArrowContainer justifyContent=\"center\" my=\"24px\" key={key}>\n      {mode === CalculatorMode.ROI_BASED_ON_PRINCIPAL ? (\n        <ArrowDownIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n      ) : (\n        <ArrowUpIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n      )}\n    </ArrowContainer>\n  )\n}\n\nexport default AnimatedArrow\n","import React, { useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport {\n  Modal,\n  Text,\n  Button,\n  Flex,\n  ButtonMenu,\n  Checkbox,\n  BalanceInput,\n  HelpIcon,\n  ButtonMenuItem,\n  useTooltip,\n} from 'uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport RoiCalculatorFooter from './RoiCalculatorFooter'\nimport RoiCard from './RoiCard'\nimport useRoiCalculatorReducer, { CalculatorMode, EditingCurrency } from './useRoiCalculatorReducer'\nimport AnimatedArrow from './AnimatedArrow'\n\ninterface RoiCalculatorModalProps {\n  onDismiss?: () => void\n  onBack?: () => void\n  earningTokenPrice: number\n  apr: number\n  displayApr?: string\n  linkLabel: string\n  linkHref: string\n  stakingTokenBalance: BigNumber\n  stakingTokenSymbol: string\n  stakingTokenPrice: number\n  earningTokenSymbol?: string\n  multiplier?: string\n  autoCompoundFrequency?: number\n  performanceFee?: number\n  isFarm?: boolean\n  initialValue?: string\n}\n\nconst StyledModal = styled(Modal)`\n  width: 345px;\n  & > :nth-child(2) {\n    padding: 0;\n  }\n`\n\nconst ScrollableContainer = styled.div`\n  padding: 24px;\n  max-height: 500px;\n  overflow-y: auto;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-height: none;\n  }\n`\n\nconst FullWidthButtonMenu = styled(ButtonMenu)<{ disabled?: boolean }>`\n  width: 100%;\n\n  & > button {\n    width: 100%;\n  }\n\n  opacity: ${({ disabled }) => (disabled ? 0.5 : 1)};\n`\n\nconst RoiCalculatorModal: React.FC<RoiCalculatorModalProps> = ({\n  onDismiss,\n  onBack,\n  earningTokenPrice,\n  apr,\n  displayApr,\n  linkLabel,\n  linkHref,\n  stakingTokenBalance,\n  stakingTokenSymbol,\n  stakingTokenPrice,\n  multiplier,\n  initialValue,\n  earningTokenSymbol = 'MARIACHI',\n  autoCompoundFrequency = 0,\n  performanceFee = 0,\n  isFarm = false,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useActiveWeb3React()\n  const balanceInputRef = useRef<HTMLInputElement | null>(null)\n\n  const {\n    state,\n    setPrincipalFromUSDValue,\n    setPrincipalFromTokenValue,\n    setStakingDuration,\n    toggleCompounding,\n    toggleEditingCurrency,\n    setCompoundingFrequency,\n    setCalculatorMode,\n    setTargetRoi,\n  } = useRoiCalculatorReducer(stakingTokenPrice, earningTokenPrice, apr, autoCompoundFrequency, performanceFee)\n\n  const { compounding, activeCompoundingIndex, stakingDuration, editingCurrency } = state.controls\n  const { principalAsUSD, principalAsToken } = state.data\n\n  // Auto-focus input on opening modal\n  useEffect(() => {\n    if (balanceInputRef.current) {\n      balanceInputRef.current.focus()\n    }\n  }, [])\n\n  // If user comes to calculator from staking modal - initialize with whatever they put in there\n  useEffect(() => {\n    if (initialValue) {\n      setPrincipalFromTokenValue(initialValue)\n    }\n  }, [initialValue, setPrincipalFromTokenValue])\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    isFarm\n      ? t('“My Balance” here includes both LP Tokens in your wallet, and LP Tokens already staked in this farm.')\n      : t(\n          '“My Balance” here includes both %assetSymbol% in your wallet, and %assetSymbol% already staked in this pool.',\n          { assetSymbol: stakingTokenSymbol },\n        ),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  const onBalanceFocus = () => {\n    setCalculatorMode(CalculatorMode.ROI_BASED_ON_PRINCIPAL)\n  }\n\n  const editingUnit = editingCurrency === EditingCurrency.TOKEN ? stakingTokenSymbol : 'USD'\n  const editingValue = editingCurrency === EditingCurrency.TOKEN ? principalAsToken : principalAsUSD\n  const conversionUnit = editingCurrency === EditingCurrency.TOKEN ? 'USD' : stakingTokenSymbol\n  const conversionValue = editingCurrency === EditingCurrency.TOKEN ? principalAsUSD : principalAsToken\n  const onUserInput = editingCurrency === EditingCurrency.TOKEN ? setPrincipalFromTokenValue : setPrincipalFromUSDValue\n\n  return (\n    <StyledModal\n      title={t('ROI Calculator')}\n      onDismiss={onBack || onDismiss}\n      onBack={onBack ?? null}\n      headerBackground=\"gradients.cardHeader\"\n    >\n      <ScrollableContainer>\n        <Flex flexDirection=\"column\" mb=\"8px\">\n          <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n            {t('%asset% staked', { asset: stakingTokenSymbol })}\n          </Text>\n          <BalanceInput\n            currencyValue={`${conversionValue} ${conversionUnit}`}\n            innerRef={balanceInputRef}\n            placeholder=\"0.00\"\n            value={editingValue}\n            unit={editingUnit}\n            onUserInput={onUserInput}\n            switchEditingUnits={toggleEditingCurrency}\n            onFocus={onBalanceFocus}\n          />\n          <Flex justifyContent=\"space-between\" mt=\"8px\">\n            <Button\n              scale=\"xs\"\n              p=\"4px 16px\"\n              width=\"68px\"\n              variant=\"tertiary\"\n              onClick={() => setPrincipalFromUSDValue('100')}\n            >\n              $100\n            </Button>\n            <Button\n              scale=\"xs\"\n              p=\"4px 16px\"\n              width=\"68px\"\n              variant=\"tertiary\"\n              onClick={() => setPrincipalFromUSDValue('1000')}\n            >\n              $1000\n            </Button>\n            <Button\n              disabled={stakingTokenBalance.lte(0) || !account}\n              scale=\"xs\"\n              p=\"4px 16px\"\n              width=\"128px\"\n              variant=\"tertiary\"\n              onClick={() =>\n                setPrincipalFromUSDValue(getBalanceNumber(stakingTokenBalance.times(stakingTokenPrice)).toString())\n              }\n            >\n              {t('My Balance').toLocaleUpperCase()}\n            </Button>\n            <span ref={targetRef}>\n              <HelpIcon width=\"16px\" height=\"16px\" color=\"textSubtle\" />\n            </span>\n            {tooltipVisible && tooltip}\n          </Flex>\n          <Text mt=\"24px\" color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n            {t('Staked for')}\n          </Text>\n          <FullWidthButtonMenu activeIndex={stakingDuration} onItemClick={setStakingDuration} scale=\"sm\">\n            <ButtonMenuItem variant=\"tertiary\">{t('1D')}</ButtonMenuItem>\n            <ButtonMenuItem variant=\"tertiary\">{t('7D')}</ButtonMenuItem>\n            <ButtonMenuItem variant=\"tertiary\">{t('30D')}</ButtonMenuItem>\n            <ButtonMenuItem variant=\"tertiary\">{t('1Y')}</ButtonMenuItem>\n            <ButtonMenuItem variant=\"tertiary\">{t('5Y')}</ButtonMenuItem>\n          </FullWidthButtonMenu>\n          {autoCompoundFrequency === 0 && (\n            <>\n              <Text mt=\"24px\" color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n                {t('Compounding every')}\n              </Text>\n              <Flex alignItems=\"center\">\n                <Flex flex=\"1\">\n                  <Checkbox scale=\"sm\" checked={compounding} onChange={toggleCompounding} />\n                </Flex>\n                <Flex flex=\"6\">\n                  <FullWidthButtonMenu\n                    disabled={!compounding}\n                    activeIndex={activeCompoundingIndex}\n                    onItemClick={setCompoundingFrequency}\n                    scale=\"sm\"\n                  >\n                    <ButtonMenuItem>{t('1D')}</ButtonMenuItem>\n                    <ButtonMenuItem>{t('7D')}</ButtonMenuItem>\n                    <ButtonMenuItem>{t('14D')}</ButtonMenuItem>\n                    <ButtonMenuItem>{t('30D')}</ButtonMenuItem>\n                  </FullWidthButtonMenu>\n                </Flex>\n              </Flex>\n            </>\n          )}\n        </Flex>\n        <AnimatedArrow calculatorState={state} />\n        <Flex>\n          <RoiCard\n            earningTokenSymbol={earningTokenSymbol}\n            calculatorState={state}\n            setTargetRoi={setTargetRoi}\n            setCalculatorMode={setCalculatorMode}\n          />\n        </Flex>\n      </ScrollableContainer>\n      <RoiCalculatorFooter\n        isFarm={isFarm}\n        apr={apr}\n        displayApr={displayApr}\n        autoCompoundFrequency={autoCompoundFrequency}\n        multiplier={multiplier}\n        linkLabel={linkLabel}\n        linkHref={linkHref}\n        performanceFee={performanceFee}\n      />\n    </StyledModal>\n  )\n}\n\nexport default RoiCalculatorModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from 'uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  stakedBalance: BigNumber\n  multiplier?: string\n  lpPrice: BigNumber\n  lpLabel?: string\n  onConfirm: (amount: string, address: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  isTokenOnly?: boolean\n  cakePrice?: BigNumber\n  referral?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  stakedBalance,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  multiplier,\n  displayApr,\n  lpPrice,\n  lpLabel,\n  apr,\n  addLiquidityUrl,\n  isTokenOnly,\n  cakePrice,\n  referral,\n}) => {\n  const [val, setVal] = useState('')\n  const [valAddress, setValAddress] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const lpTokensToStake = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const usdToStake = lpTokensToStake.times(lpPrice)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: cakePrice.toNumber(),\n  })\n\n  const annualRoi = cakePrice.times(interestBreakdown[3])\n  const formattedAnnualRoi = formatNumber(\n    annualRoi.toNumber(),\n    annualRoi.gt(10000) ? 0 : 2,\n    annualRoi.gt(10000) ? 0 : 2,\n  )\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleChangeAddress = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget) {\n        setValAddress(e.currentTarget.value)\n      }\n    },\n    [setValAddress],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n        stakingTokenBalance={stakedBalance.plus(max)}\n        stakingTokenSymbol={tokenName}\n        stakingTokenPrice={lpPrice.toNumber()}\n        earningTokenPrice={cakePrice.toNumber()}\n        apr={apr}\n        multiplier={multiplier}\n        displayApr={displayApr}\n        linkHref={addLiquidityUrl}\n        isFarm\n        initialValue={val}\n        onBack={() => setShowRoiCalculator(false)}\n      />\n    )\n  }\n\n  return (\n    <Modal title=\"Stake Tokens\" onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={!isTokenOnly ? addLiquidityUrl : null}\n        inputTitle={t('Stake')}\n      />\n      <ModalInput value={valAddress} onChange={handleChangeAddress} inputTitle=\"Dog Fight Address (Optional)\" />\n      <Text fontSize=\"16px\">In this field you can change your referral address.</Text>\n      <Text fontSize=\"16px\">It will receive an extra 1% of your yield each harvest.</Text>\n      <Text fontSize=\"16px\">{`${\n        referral !== '0x0000000000000000000000000000000000000000' ? `Your current referral address is ${referral}` : ``\n      } `}</Text>\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text mr=\"8px\" color=\"textSubtle\">\n          {t('Annual ROI at current rates')}:\n        </Text>\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n          <IconButton variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </AnnualRoiContainer>\n      </Flex>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val, valAddress)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      {!isTokenOnly && (\n        <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n          {t('Get %symbol%', { symbol: tokenName })}\n        </LinkExternal>\n      )}\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from 'uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport useUnstakeFarms from 'hooks/useUnstakeFarms'\nimport useStakeFarms from 'hooks/useStakeFarms'\nimport { useAppDispatch } from 'state'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n  isTokenOnly?: boolean\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel,\n  isTokenOnly,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string, address: string) => {\n    await onStake(amount, address)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001'\n    }\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      multiplier={multiplier}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n      isTokenOnly={isTokenOnly}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={(stakedBalance as BigNumber).eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceMariachiDoge } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from 'hooks/useHarvestFarm'\nimport { useAppDispatch } from 'state'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceMariachiDoge()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'MARIACHI' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {pendingTx ? t('Harvesting') : t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from 'uikit'\nimport useApproveFarm from 'hooks/useApproveFarm'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC20 } from 'hooks/useContract'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && parseInt(allowance.toString()) > 0\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        apr={farm.apr}\n        lpLabel={lpLabel}\n        cakePrice={cakePrice}\n        addLiquidityUrl={addLiquidityUrl}\n        isTokenOnly={farm.isTokenOnly}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          MARIACHI\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, IconButton, useModal, CalculateIcon } from 'uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport interface ApyButtonProps {\n  variant: 'text' | 'text-and-button'\n  pid: number\n  lpSymbol: string\n  lpLabel?: string\n  multiplier: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  variant,\n  pid,\n  lpLabel,\n  lpSymbol,\n  cakePrice,\n  apr,\n  multiplier,\n  displayApr,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\n      stakingTokenSymbol={lpSymbol}\n      stakingTokenPrice={parseFloat(lpPrice.toString())}\n      earningTokenPrice={parseFloat(cakePrice.toString())}\n      apr={apr}\n      multiplier={multiplier}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\n      {displayApr}%\n      {variant === 'text-and-button' && (\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\n          <CalculateIcon width=\"18px\" />\n        </IconButton>\n      )}\n    </ApyLabelContainer>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from 'uikit'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { Farm } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.isGreaterThanOrEqualTo(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.tokenSymbol === 'CAKE'\n\n  return (\n    <StyledCard isActive={isPromotedFarm}>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          token={farm.tokenSymbol}\n          quoteToken={farm.quoteTokenSymbol}\n        />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{t('APR')}:</Text>\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n              {farm.apr ? (\n                <ApyButton\n                  variant=\"text-and-button\"\n                  pid={farm.pid}\n                  lpSymbol={farm.lpSymbol}\n                  multiplier={farm.multiplier}\n                  lpLabel={lpLabel}\n                  cakePrice={cakePrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Earn')}:</Text>\n          <Text bold>MARIACHI</Text>\n        </Flex>\n        <CardActionsContainer farm={farm} lpLabel={lpLabel} account={account} cakePrice={cakePrice} />\n      </FarmCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport BigNumber from 'bignumber.js'\nimport { Skeleton } from 'uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  pid: number\n  lpLabel: string\n  lpSymbol: string\n  tokenAddress?: string\n  quoteTokenAddress?: string\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  pid,\n  lpLabel,\n  lpSymbol,\n  multiplier,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <ApyButton\n          variant={hideButton ? 'text' : 'text-and-button'}\n          pid={pid}\n          lpSymbol={lpSymbol}\n          lpLabel={lpLabel}\n          multiplier={multiplier}\n          cakePrice={cakePrice}\n          apr={originalValue}\n          displayApr={value}\n        />\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from 'uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenPairImage } from 'components/TokenImage'\nimport { useFarmUser } from 'state/hooks'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: string\n  quoteToken: string\n  isTokenOnly: boolean\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid, isTokenOnly }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage\n          variant=\"inverted\"\n          primaryToken={token}\n          secondaryToken={quoteToken}\n          isTokenOnly={isTokenOnly}\n          width={40}\n          height={40}\n        />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from 'uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Container>\n      {!isDesktop && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, HelpIcon, Skeleton, useTooltip } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of MARIACHI rewards each farm receives, as a proportion of the MARIACHI produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 MARIACHI per block, a 40x farm would receive 40 MARIACHI per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Skeleton } from 'uikit'\nimport BigNumber from 'bignumber.js'\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.isGreaterThanOrEqualTo(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React, { useState } from 'react'\nimport { Button, Heading, Skeleton, Text } from 'uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceMariachiDoge } from 'state/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from 'hooks/useHarvestFarm'\nimport { useAppDispatch } from 'state'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceMariachiDoge()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          MARIACHI\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {pendingTx ? t('Harvesting') : t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from 'uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC20 } from 'hooks/useContract'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from 'hooks/useUnstakeFarms'\nimport useStakeFarms from 'hooks/useStakeFarms'\nimport useApproveFarm from 'hooks/useApproveFarm'\nimport { useAppDispatch } from 'state'\nimport { useFarmUser, usePriceMariachiDoge, useLpTokenPrice } from 'state/hooks'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n  isTokenOnly?: boolean\n  userData?: any\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  userDataReady,\n  displayApr,\n  isTokenOnly,\n  userData,\n}) => {\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { stakedBalance, tokenBalance, allowance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const cakePrice = usePriceMariachiDoge()\n  const isApproved = account && allowance && parseInt(allowance.toString()) > 0\n  \n  const lpAddress = getAddress(lpAddresses)\n\n  const handleStake = async (amount: string, address: string) => {\n    await onStake(amount, address)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(new BigNumber(stakedBalance))\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(new BigNumber(stakedBalance)).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={new BigNumber(stakedBalance)}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      cakePrice={cakePrice}\n      isTokenOnly={isTokenOnly}\n      referral={userDataReady ? userData.groupInfo : ''}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={new BigNumber(stakedBalance)} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (new BigNumber(stakedBalance).gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {new BigNumber(stakedBalance).gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(new BigNumber(stakedBalance)))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake')}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from 'uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { getAddress } from 'utils/addressHelpers'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = `https://explorer.dogechain.dog/address/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 7,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 7,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady, apr, farm, earned, liquidity, multiplier } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isDesktop, isMobile } = useMatchBreakpoints()\n\n  const isSmallerScreen = !isDesktop\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    const data = {\n      liquidity,\n      multiplier,\n      earned,\n      farm,\n      apr,\n      details\n    }\n    if (!isMobile) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...apr} hideButton={isSmallerScreen} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...data[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label=\"EARNED\">\n                <Earned {...earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n  scroll-margin-top: 64px;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container id=\"farms-table\">\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem id=\"finished-farms-button\" as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React, { useEffect, useCallback, useState, useMemo } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from 'uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport { QuoteToken } from 'config/constants/types'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly } from 'state/user/hooks'\nimport { useFarms, usePriceDogeUSDC, usePriceMariachiDoge } from 'state/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport { DesktopColumnSchema } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst getDisplayApr = (cakeRewardsApr?: number) => {\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceMariachiDoge()\n  const dogePrice = usePriceDogeUSDC()\n  const [query, setQuery] = useState('')\n  const viewMode = ViewMode.TABLE\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 999 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter(\n    (farm) => farm.pid !== 999 && farm.multiplier === '0X' && !isArchivedPid(farm.pid),\n  )\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const userDataReady = !account || activeFarms.length > 0\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        const cakeRewardPerBlock = new BigNumber(farm.mariachiPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue\n        if (farm.isTokenOnly && farm.tokenAmount) {\n          totalValue = new BigNumber(farm.tokenAmount).times(cakePrice)\n        } else {\n          totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n          if (farm.quoteTokenSymbol === QuoteToken.DOGE) {\n            totalValue = totalValue.times(dogePrice)\n          } else if (farm.quoteTokenSymbol === QuoteToken.MARIACHI) {\n            totalValue = totalValue.times(cakePrice)\n          }\n\n          if (farm.externalPid) {\n            const valuePerLp = totalValue.div(new BigNumber(farm.lpTotalSupply).div(new BigNumber(10).pow(18)))\n            const totalLp = new BigNumber(farm.lpInVamp).plus(new BigNumber(farm.lpInMaster))\n            totalValue = valuePerLp.times(totalLp)\n          }\n        }\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apr: parseFloat(apy.toString()), liquidity: totalValue }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, dogePrice, query],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n    return sortFarms(chosenFarms)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n  ])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { tokenAddresses, quoteTokenAdresses } = farm\n    const tokenAddress = tokenAddresses[2000]\n    const quoteTokenAddress = quoteTokenAdresses[2000]\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice: new BigNumber(cakePrice),\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: tokenAddress,\n        quoteToken: quoteTokenAddress,\n        isTokenOnly: farm.isTokenOnly,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr)}\n              cakePrice={new BigNumber(cakePrice)}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr)}\n              cakePrice={new BigNumber(cakePrice)}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr)}\n              cakePrice={new BigNumber(cakePrice)}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake tokens to earn MARIACHI. ¡Que chingón!')}\n        </Heading>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleWrapper>\n              <Toggle\n                id=\"staked-only-farms\"\n                checked={stakedOnly}\n                onChange={() => setStakedOnly(!stakedOnly)}\n                scale=\"sm\"\n              />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onOptionChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}