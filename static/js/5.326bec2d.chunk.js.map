{"version":3,"sources":["components/Layout/Flex.tsx","utils/farmHelpers.ts","utils/latinise.ts","components/PageHeader/PageHeader.tsx","components/SearchInput/SearchInput.tsx","components/Select/Select.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","components/TokenImage/index.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useContract.ts","hooks/useApproveFarm.ts","components/RoiCalculatorModal/useRoiCalculatorReducer.ts","hooks/useCallWithGasPrice.ts","utils/getGasPrice.ts","utils/calls/farms.ts","hooks/useUnstakeFarms.ts","hooks/useStakeFarms.ts","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","utils/compoundApyHelpers.ts","components/RoiCalculatorModal/RoiCalculatorFooter.tsx","components/RoiCalculatorModal/RoiCard.tsx","components/RoiCalculatorModal/AnimatedArrow.tsx","components/RoiCalculatorModal/index.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/WithdrawalFee.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","utils/formatBalance.ts","components/Balance.tsx"],"names":["FlexLayout","styled","div","isArchivedPid","pid","Latinise","latin_map","τ","Τ","latinise","input","replace","x","Outer","Box","theme","background","colors","gradients","bubblegum","Inner","Container","PageHeader","children","props","StyledInput","Input","InputWrapper","mediaQueries","sm","SearchInput","onChangeCallback","onChange","placeholder","useState","searchText","setSearchText","t","useTranslation","debouncedOnChange","useMemo","debounce","e","value","target","DropDownHeader","shadows","inset","inputSecondary","DropDownListContainer","zIndices","dropdown","DropDownContainer","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","options","onOptionChange","defaultOptionIndex","dropdownRef","useRef","setIsOpen","selectedOptionIndex","setSelectedOptionIndex","toggling","event","stopPropagation","useEffect","handleClickOutside","document","addEventListener","removeEventListener","onClick","label","color","ref","map","option","index","selectedIndex","Wrapper","primary","ExpandableSectionButton","expanded","role","bold","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","getImageUrlFromToken","token","TokenPairImage","primaryToken","secondaryToken","primarySrc","secondarySrc","Flex","MultiplierTag","Tag","CardHeading","multiplier","quoteToken","alignItems","mb","variant","flexDirection","split","ml","useERC20","address","library","useActiveWeb3React","getBep20Contract","getSigner","useMasterchef","getMasterchefContract","EditingCurrency","CalculatorMode","useApproveFarm","lpContract","masterChefContract","callWithGasPrice","gasPrice","useGasPrice","useCallback","contract","methodName","a","methodArgs","overrides","contractMethod","get","hasManualGasPriceOverride","tx","useCallWithGasPrice","onApprove","ethers","constants","MaxUint256","wait","receipt","status","getGasPrice","store","getState","user","GAS_PRICE_GWEI","default","gasLimit","DEFAULT_GAS_LIMIT","stakeFarm","amount","BigNumber","times","DEFAULT_TOKEN_DECIMAL","toString","enterStaking","deposit","unstakeFarm","leaveStaking","withdraw","harvestFarm","useUnstakeFarms","onUnstake","useStakeFarms","onStake","txHash","console","info","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","l","React","Children","toArray","length","child","i","StyledTokenInput","isWarning","warning","text","xs","StyledErrorMessage","Text","ModalInput","max","onSelectMax","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceUnits","parseUnits","formatBigNumber","displayBalance","pattern","inputMode","step","min","scale","mr","external","DAYS_TO_CALCULATE_AGAINST","getInterestBreakdown","principalInUSD","apr","earningTokenPrice","compoundFrequency","performanceFee","timesCompounded","aprAsDecimal","roundingDecimalsNew","Math","round","days","daysAsDecimalOfYear","principal","interestEarned","parseFloat","toFixed","getApy","apyAsDecimal","performanceFeeAsDecimal","takenAsPerformanceFee","getRoi","amountEarned","amountInvested","Footer","BulletList","textSubtle","RoiCalculatorFooter","isFarm","displayApr","autoCompoundFrequency","linkLabel","linkHref","isExpanded","setIsExpanded","useTooltip","my","placement","tooltipOffset","multiplierRef","targetRef","multiplierTooltip","multiplierTooltipVisible","tooltipVisible","gridRowCount","apy","p","prev","px","gridTemplateColumns","gridRowGap","gridTemplateRows","small","textAlign","compoundTimes","display","mt","fee","compoundingIndexToFrequency","initialState","controls","compounding","compoundingFrequency","activeCompoundingIndex","stakingDuration","mode","ROI_BASED_ON_PRINCIPAL","editingCurrency","USD","data","principalAsToken","principalAsUSD","roiUSD","roiTokens","roiPercentage","roiCalculatorReducer","state","action","type","payload","toggledCompounding","PRINCIPAL_BASED_ON_ROI","currencyAfterChange","TOKEN","useRoiCalculatorReducer","stakingTokenPrice","useReducer","dispatch","principalInUSDAsNumber","interestBreakdown","hasInterest","Number","isNaN","roiAsUSD","principalForExpectedRoi","interest","getPrincipalForInterest","principalUSD","principalToken","setPrincipalFromUSDValue","principalAsTokenBN","gt","setPrincipalFromTokenValue","principalAsUsdBN","principalAsUsdString","setStakingDuration","stakingDurationIndex","toggleCompounding","toggleEditingCurrency","setCompoundingFrequency","setCalculatorMode","modeToSet","setTargetRoi","targetRoiAsTokens","toNumber","MILLION","RoiCardWrapper","radii","RoiCardInner","RoiInputContainer","RoiDisplayContainer","RoiDollarAmount","fadeOut","RoiCard","earningTokenSymbol","calculatorState","expectedRoi","setExpectedRoi","inputRef","current","focus","onEnterEditing","toLocaleString","minimumFractionDigits","maximumFractionDigits","textTransform","currentTarget","validity","valid","roiAsString","rotate","keyframes","ArrowContainer","AnimatedArrow","key","setKey","prevKey","prevId","parseInt","StyledModal","Modal","ScrollableContainer","FullWidthButtonMenu","ButtonMenu","disabled","RoiCalculatorModal","onDismiss","onBack","stakingTokenBalance","stakingTokenSymbol","initialValue","account","balanceInputRef","assetSymbol","editingUnit","editingValue","conversionUnit","conversionValue","onUserInput","title","headerBackground","asset","currencyValue","innerRef","unit","switchEditingUnits","onFocus","lte","getBalanceNumber","toLocaleUpperCase","activeIndex","onItemClick","flex","checked","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","tokenName","lpPrice","cakePrice","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","annualRoi","formattedAnnualRoi","formatNumber","handleChange","handleSelectMax","plus","isFinite","eq","error","alignSelf","WithdrawModal","valNumber","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","useAppDispatch","useWeb3React","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","lt","ROUND_DOWN","useModal","onPresentDeposit","onPresentWithdraw","Balance","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","HarvestAction","earnings","usePriceMariachiCro","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lpAddress","getAddress","isApproved","handleApprove","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","isGreaterThanOrEqualTo","undefined","toUpperCase","isPromotedFarm","tokenSymbol","isActive","quoteTokenSymbol","CardActionsContainer","getBscScanLink","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","WithdrawalFeeWrapper","WithdrawalFee","withdrawalFees","displayWithdrawalFee","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","collapseAnimation","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","withdrawalFee","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","columnIndex","indexOf","createElement","handleRenderRow","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","ViewMode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","getDisplayApr","cakeRewardsApr","Farms","path","farmsLP","useFarms","croPrice","usePriceCroUSDC","query","setQuery","useUserFarmsViewMode","setViewMode","sortOption","setSortOption","fastRefresh","useRefresh","isArchived","isInactive","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","inactiveFarms","archivedFarms","stakedOnlyFarms","isGreaterThan","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","totalValue","cakeRewardPerYear","mariachiPerBlock","poolWeight","pow","BLOCKS_PER_YEAR","isTokenOnly","tokenAmount","tokenPriceVsQuote","lpTotalInQuoteToken","QuoteToken","CRO","MARIACHI","isExternal","valuePerLp","lpInMaster","lpInVamp","comparedTo","lowercaseQuery","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","rowData","tokenAddress","quoteTokenAddress","Page","marginLeft","sort","b","exact","renderContent","src","alt","dividedBy","BIG_TEN","displayDecimals","number","minPrecision","maxPrecision","remainder","mod","from","formatUnits","sub","formatLocalisedCompactNumber","codeFromStorage","getLanguageCodeFromLS","Intl","NumberFormat","notation","compactDisplay","maximumSignificantDigits","format","isDisabled","previousValue","start","end","suffix","duration","separator"],"mappings":"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","file":"static/js/5.326bec2d.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","const ARCHIVED_FARMS_START_PID = 139\nconst ARCHIVED_FARMS_END_PID = 250\n\nconst isArchivedPid = (pid: number) => pid >= ARCHIVED_FARMS_START_PID && pid <= ARCHIVED_FARMS_END_PID\n\nexport default isArchivedPid\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from 'uikit'\nimport Container from '../Layout/Container'\nimport { PageHeaderProps } from './types'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<PageHeaderProps> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React, { useState, useMemo } from 'react'\nimport { Input } from 'uikit'\nimport styled from 'styled-components'\nimport debounce from 'lodash/debounce'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n  }\n`\n\ninterface Props {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  placeholder?: string\n}\n\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback, placeholder = 'Search' }) => {\n  const [searchText, setSearchText] = useState('')\n\n  const { t } = useTranslation()\n\n  const debouncedOnChange = useMemo(\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\n    [onChangeCallback],\n  )\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value)\n    debouncedOnChange(e)\n  }\n\n  return (\n    <InputWrapper>\n      <StyledInput value={searchText} onChange={onChange} placeholder={t(placeholder)} />\n    </InputWrapper>\n  )\n}\n\nexport default SearchInput\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Box, BoxProps, Text } from 'uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled(Box)<{ isOpen: boolean }>`\n  cursor: pointer;\n  width: 100%;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n  user-select: none;\n  z-index: 20;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps extends BoxProps {\n  options: OptionProps[]\n  onOptionChange?: (option: OptionProps) => void\n  defaultOptionIndex?: number\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({\n  options,\n  onOptionChange,\n  defaultOptionIndex = 0,\n  ...props\n}) => {\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(defaultOptionIndex)\n\n  const toggling = (event: React.MouseEvent<HTMLDivElement>) => {\n    setIsOpen(!isOpen)\n    event.stopPropagation()\n  }\n\n  const onOptionClicked = (selectedIndex: number) => () => {\n    setSelectedOptionIndex(selectedIndex)\n    setIsOpen(false)\n\n    if (onOptionChange) {\n      onOptionChange(options[selectedIndex])\n    }\n  }\n\n  useEffect(() => {\n    const handleClickOutside = () => {\n      setIsOpen(false)\n    }\n\n    document.addEventListener('click', handleClickOutside)\n    return () => {\n      document.removeEventListener('click', handleClickOutside)\n    }\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} {...props}>\n      <DropDownHeader onClick={toggling}>\n        <Text>{options[selectedOptionIndex].label}</Text>\n      </DropDownHeader>\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option, index) =>\n            index !== selectedOptionIndex ? (\n              <ListItem onClick={onOptionClicked(index)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded = false }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\nexport default ExpandableSectionButton\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from 'uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport {\n  TokenPairImage as UIKitTokenPairImage,\n  TokenPairImageProps as UIKitTokenPairImageProps,\n  TokenImage as UIKitTokenImage,\n  ImageProps,\n} from 'uikit'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: string\n  secondaryToken: string\n}\n\nconst getImageUrlFromToken = (token: string) => {\n  return `/images/tokens/${token}.svg`\n}\n\nexport const TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken, ...props }) => {\n  return (\n    <UIKitTokenPairImage\n      primarySrc={getImageUrlFromToken(primaryToken)}\n      secondarySrc={getImageUrlFromToken(secondaryToken)}\n      {...props}\n    />\n  )\n}\n\ninterface TokenImageProps extends ImageProps {\n  token: string\n}\n\nexport const TokenImage: React.FC<TokenImageProps> = ({ token, ...props }) => {\n  return <UIKitTokenImage src={getImageUrlFromToken(token)} {...props} />\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Skeleton } from 'uikit'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  token: string\n  quoteToken: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {multiplier ? (\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n          ) : (\n            <Skeleton ml=\"4px\" width={42} height={28} />\n          )}\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBep20Contract, getCakeContract, getMasterchefContract, getCakeVaultContract } from 'utils/contractHelpers'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\n// Imports below migrated from Exchange useContract.ts\nimport { Contract } from '@ethersproject/contracts'\nimport { WETH } from '@pancakeswap/sdk'\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport ERC20_ABI from '../config/abi/erc20.json'\nimport WETH_ABI from '../config/abi/weth.json'\nimport multiCallAbi from '../config/abi/Multicall.json'\nimport { getContract } from '../utils'\n\nexport const useERC20 = (address: string) => {\n  const { library } = useActiveWeb3React()\n  return useMemo(() => getBep20Contract(address, library.getSigner()), [address, library])\n}\n\nexport const useCake = () => {\n  const { library } = useActiveWeb3React()\n  return useMemo(() => getCakeContract(library.getSigner()), [library])\n}\n\nexport const useMasterchef = () => {\n  const { library } = useActiveWeb3React()\n  return useMemo(() => getMasterchefContract(library.getSigner()), [library])\n}\n\nexport const useCakeVaultContract = () => {\n  const { library } = useActiveWeb3React()\n  return useMemo(() => getCakeVaultContract(library.getSigner()), [library])\n}\n\nfunction useContract(address: string | undefined, ABI: any, withSignerIfPossible = true): Contract | null {\n  const { library, account } = useActiveWeb3React()\n\n  return useMemo(() => {\n    if (!address || !ABI || !library) return null\n    try {\n      return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined)\n    } catch (error) {\n      console.error('Failed to get contract', error)\n      return null\n    }\n  }, [address, ABI, library, withSignerIfPossible, account])\n}\n\nexport function useTokenContract(tokenAddress?: string, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(tokenAddress, ERC20_ABI, withSignerIfPossible)\n}\n\nexport function useWETHContract(withSignerIfPossible?: boolean): Contract | null {\n  const { chainId } = useActiveWeb3React()\n  return useContract(chainId ? WETH[chainId].address : undefined, WETH_ABI, withSignerIfPossible)\n}\n\nexport function usePairContract(pairAddress?: string, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(pairAddress, IUniswapV2PairABI, withSignerIfPossible)\n}\n\nexport function useMulticallContract(): Contract | null {\n  return useContract(getMulticallAddress(), multiCallAbi, false)\n}\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    const tx = await callWithGasPrice(lpContract, 'approve', [masterChefContract.address, ethers.constants.MaxUint256])\n    const receipt = await tx.wait()\n    return receipt.status\n  }, [lpContract, masterChefContract, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import { useEffect, useReducer, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { getInterestBreakdown, getPrincipalForInterest, getRoi } from 'utils/compoundApyHelpers'\n\n/**\n * This hook is handling all the calculator state and calculations.\n * UI connected to it is merely representation of the data and buttons to trigger actions\n */\n\n// Mapping from the compounding frequency button index to actual compounding frequency\n// in number of compounds per day\nconst compoundingIndexToFrequency = {\n  0: 1,\n  1: 0.142857142,\n  2: 0.071428571, // once every 7 days\n  3: 0.033333333, // once every 30 days\n}\n\nconst TOKEN_PRECISION = 10\nconst USD_PRECISION = 2\n\n// Used to track/react which currency user is editing (i.e. USD amount or Token amount)\nexport enum EditingCurrency {\n  TOKEN,\n  USD,\n}\n\n// Calculator works in 2 modes\nexport enum CalculatorMode {\n  ROI_BASED_ON_PRINCIPAL, // User edits principal value and sees what ROI they get\n  PRINCIPAL_BASED_ON_ROI, // User edits ROI value and sees what principal they need to invest to reach it\n}\n\nexport interface RoiCalculatorReducerState {\n  controls: {\n    compounding: boolean // Compounding checkbox state\n    compoundingFrequency: number // Compounding frequency in number of compounds per day\n    activeCompoundingIndex: number // index of active compounding button in ButtonMenu\n    stakingDuration: number // index of active staking duration button in ButtonMenu\n    mode: CalculatorMode\n    editingCurrency: EditingCurrency\n  }\n  data: {\n    principalAsToken: string // Used as value for Inputs\n    principalAsUSD: string // Used as value for Inputs\n    roiUSD: number\n    roiTokens: number\n    roiPercentage: number // ROI expressed in percentage relative to principal\n  }\n}\n\nconst initialState: RoiCalculatorReducerState = {\n  controls: {\n    compounding: true,\n    compoundingFrequency: 1, // how many compound in a day , e.g. 1 = once a day, 0.071 - once per 2 weeks\n    activeCompoundingIndex: 0, // active compounding selected in\n    stakingDuration: 3,\n    mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL,\n    editingCurrency: EditingCurrency.USD,\n  },\n  data: {\n    principalAsToken: '0.00',\n    principalAsUSD: '',\n    roiUSD: 0,\n    roiTokens: 0,\n    roiPercentage: 0,\n  },\n}\n\nconst roiCalculatorReducer = (\n  state: RoiCalculatorReducerState,\n  action: { type: string; payload?: any },\n): RoiCalculatorReducerState => {\n  switch (action.type) {\n    case 'setStakingDuration': {\n      const controls = { ...state.controls, stakingDuration: action.payload }\n      return {\n        ...state,\n        controls,\n      }\n    }\n    case 'toggleCompounding': {\n      const toggledCompounding = !state.controls.compounding\n      const controls = { ...state.controls, compounding: toggledCompounding }\n      return {\n        ...state,\n        controls,\n      }\n    }\n    case 'setCompoundingFrequency': {\n      const { index, autoCompoundFrequency } = action.payload\n      if (autoCompoundFrequency) {\n        return {\n          ...state,\n          controls: {\n            ...state.controls,\n            compoundingFrequency: autoCompoundFrequency,\n          },\n        }\n      }\n      const compoundingFrequency = compoundingIndexToFrequency[index]\n      const controls = { ...state.controls, compoundingFrequency, activeCompoundingIndex: index }\n      return {\n        ...state,\n        controls,\n      }\n    }\n    case 'setPrincipal': {\n      const { principalAsUSD, principalAsToken } = action.payload\n      const data = { ...state.data, principalAsUSD, principalAsToken }\n      const controls = { ...state.controls, mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL }\n      return {\n        controls,\n        data,\n      }\n    }\n    case 'setPrincipalForTargetRoi': {\n      const { principalAsUSD, principalAsToken, roiPercentage } = action.payload\n      const data = { ...state.data, principalAsUSD, principalAsToken, roiPercentage }\n      return {\n        ...state,\n        data,\n      }\n    }\n    case 'setCalculatorMode': {\n      const mode = action.payload\n      const controls = { ...state.controls, mode }\n      if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\n        const roiUSD = parseFloat(state.data.roiUSD.toFixed(USD_PRECISION))\n        const data = { ...state.data, roiUSD }\n        return { controls, data }\n      }\n      return { ...state, controls }\n    }\n    case 'setRoi': {\n      const data = { ...state.data, ...action.payload }\n      return { ...state, data }\n    }\n    case 'setTargetRoi': {\n      const { roiUSD, roiTokens } = action.payload\n      const data = { ...state.data, roiUSD, roiTokens }\n      const controls = { ...state.controls, mode: CalculatorMode.PRINCIPAL_BASED_ON_ROI }\n      return { controls, data }\n    }\n    case 'toggleEditingCurrency': {\n      const currencyAfterChange =\n        state.controls.editingCurrency === EditingCurrency.USD ? EditingCurrency.TOKEN : EditingCurrency.USD\n      const controls = { ...state.controls, editingCurrency: currencyAfterChange }\n      return { ...state, controls }\n    }\n    default:\n      return state\n  }\n}\n\nconst useRoiCalculatorReducer = (\n  stakingTokenPrice: number,\n  earningTokenPrice: number,\n  apr: number,\n  autoCompoundFrequency: number,\n  performanceFee: number,\n) => {\n  const [state, dispatch] = useReducer(roiCalculatorReducer, initialState)\n  const { principalAsUSD, roiUSD } = state.data\n  const { compounding, compoundingFrequency, stakingDuration, mode } = state.controls\n\n  // If pool is auto-compounding set state's compounding frequency to this pool's auto-compound frequency\n  useEffect(() => {\n    if (autoCompoundFrequency > 0) {\n      dispatch({ type: 'setCompoundingFrequency', payload: { autoCompoundFrequency } })\n    }\n  }, [autoCompoundFrequency])\n\n  // Calculates and sets ROI whenever related values change\n  useEffect(() => {\n    if (mode === CalculatorMode.ROI_BASED_ON_PRINCIPAL) {\n      const principalInUSDAsNumber = parseFloat(principalAsUSD)\n      const compoundFrequency = compounding ? compoundingFrequency : 0\n      const interestBreakdown = getInterestBreakdown({\n        principalInUSD: principalInUSDAsNumber,\n        apr,\n        earningTokenPrice,\n        compoundFrequency,\n        performanceFee,\n      })\n      const hasInterest = !Number.isNaN(interestBreakdown[stakingDuration])\n      const roiTokens = hasInterest ? interestBreakdown[stakingDuration] : 0\n      const roiAsUSD = hasInterest ? roiTokens * earningTokenPrice : 0\n      const roiPercentage = hasInterest\n        ? getRoi({\n            amountEarned: roiAsUSD,\n            amountInvested: principalInUSDAsNumber,\n          })\n        : 0\n      dispatch({ type: 'setRoi', payload: { roiUSD: roiAsUSD, roiTokens, roiPercentage } })\n    }\n  }, [principalAsUSD, apr, stakingDuration, earningTokenPrice, performanceFee, compounding, compoundingFrequency, mode])\n\n  // Calculates and sets principal based on expected ROI value\n  useEffect(() => {\n    if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\n      const principalForExpectedRoi = getPrincipalForInterest(\n        roiUSD,\n        apr,\n        compounding ? compoundingFrequency : 0,\n        performanceFee,\n      )\n      const principalUSD = !Number.isNaN(principalForExpectedRoi[stakingDuration])\n        ? principalForExpectedRoi[stakingDuration]\n        : 0\n      const principalToken = new BigNumber(principalUSD).div(stakingTokenPrice)\n      const roiPercentage = getRoi({\n        amountEarned: roiUSD,\n        amountInvested: principalUSD,\n      })\n      dispatch({\n        type: 'setPrincipalForTargetRoi',\n        payload: {\n          principalAsUSD: principalUSD.toFixed(USD_PRECISION),\n          principalAsToken: principalToken.toFixed(TOKEN_PRECISION),\n          roiPercentage,\n        },\n      })\n    }\n  }, [stakingDuration, apr, compounding, compoundingFrequency, mode, roiUSD, stakingTokenPrice, performanceFee])\n\n  // Handler for compounding frequency buttons\n  const setCompoundingFrequency = (index: number) => {\n    dispatch({ type: 'setCompoundingFrequency', payload: { index } })\n  }\n\n  // Handler for principal input when in USD mode\n  const setPrincipalFromUSDValue = (amount: string) => {\n    const principalAsTokenBN = new BigNumber(amount).div(stakingTokenPrice)\n    const principalAsToken = principalAsTokenBN.gt(0) ? principalAsTokenBN.toFixed(TOKEN_PRECISION) : '0.00'\n    dispatch({ type: 'setPrincipal', payload: { principalAsUSD: amount, principalAsToken } })\n  }\n\n  // Handler for principal input when in Token mode\n  const setPrincipalFromTokenValue = useCallback(\n    (amount: string) => {\n      const principalAsUsdBN = new BigNumber(amount).times(stakingTokenPrice)\n      const principalAsUsdString = principalAsUsdBN.gt(0) ? principalAsUsdBN.toFixed(USD_PRECISION) : '0.00'\n      dispatch({\n        type: 'setPrincipal',\n        payload: { principalAsUSD: principalAsUsdString, principalAsToken: amount },\n      })\n    },\n    [stakingTokenPrice],\n  )\n\n  // Handler for staking duration buttons\n  const setStakingDuration = (stakingDurationIndex: number) => {\n    dispatch({ type: 'setStakingDuration', payload: stakingDurationIndex })\n  }\n\n  // Handler for compounding checkbox\n  const toggleCompounding = () => {\n    dispatch({ type: 'toggleCompounding' })\n  }\n\n  // Handler for principal input mode switch\n  const toggleEditingCurrency = () => {\n    dispatch({ type: 'toggleEditingCurrency' })\n  }\n\n  const setCalculatorMode = (modeToSet: CalculatorMode) => {\n    dispatch({ type: 'setCalculatorMode', payload: modeToSet })\n  }\n\n  // Handler for ROI input\n  const setTargetRoi = (amount: string) => {\n    const targetRoiAsTokens = new BigNumber(amount).div(earningTokenPrice)\n    dispatch({\n      type: 'setTargetRoi',\n      payload: { roiUSD: +amount, roiTokens: targetRoiAsTokens.isNaN() ? 0 : targetRoiAsTokens.toNumber() },\n    })\n  }\n\n  return {\n    state,\n    setPrincipalFromUSDValue,\n    setPrincipalFromTokenValue,\n    setStakingDuration,\n    toggleCompounding,\n    toggleEditingCurrency,\n    setCompoundingFrequency,\n    setCalculatorMode,\n    setTargetRoi,\n  }\n}\n\nexport default useRoiCalculatorReducer\n","import { useCallback } from 'react'\nimport ethers, { Contract, CallOverrides } from 'ethers'\nimport { useGasPrice } from 'state/user/hooks'\nimport { get } from 'lodash'\n\n/**\n * Perform a contract call with a gas price returned from useGasPrice\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param methodArgs An array of arguments to pass to the method\n * @param overrides An overrides object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport function useCallWithGasPrice() {\n  const gasPrice = useGasPrice()\n\n  const callWithGasPrice = useCallback(\n    async (\n      contract: Contract,\n      methodName: string,\n      methodArgs: any[] = [],\n      overrides: CallOverrides = null,\n    ): Promise<ethers.providers.TransactionResponse> => {\n      const contractMethod = get(contract, methodName)\n      const hasManualGasPriceOverride = overrides?.gasPrice\n\n      const tx = await contractMethod(\n        ...methodArgs,\n        hasManualGasPriceOverride ? { ...overrides } : { ...overrides, gasPrice },\n      )\n\n      return tx\n    },\n    [gasPrice],\n  )\n\n  return { callWithGasPrice }\n}\n","import store from 'state'\nimport { GAS_PRICE_GWEI } from 'state/user/hooks/helpers'\n\nconst getGasPrice = (): string => {\n  const state = store.getState()\n  const userGas = state.user.gasPrice || GAS_PRICE_GWEI.default\n  return userGas\n}\n\nexport default getGasPrice\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport getGasPrice from 'utils/getGasPrice'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nexport const stakeFarm = async (masterChefContract, pid, amount) => {\n  const gasPrice = getGasPrice()\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  if (pid === 0) {\n    const tx = await masterChefContract.enterStaking(value, { ...options, gasPrice })\n    const receipt = await tx.wait()\n    return receipt.status\n  }\n\n  const tx = await masterChefContract.deposit(pid, value, { ...options, gasPrice })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const unstakeFarm = async (masterChefContract, pid, amount) => {\n  const gasPrice = getGasPrice()\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  if (pid === 0) {\n    const tx = await masterChefContract.leaveStaking(value, { ...options, gasPrice })\n    const receipt = await tx.wait()\n    return receipt.status\n  }\n\n  const tx = await masterChefContract.withdraw(pid, value, { ...options, gasPrice })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const harvestFarm = async (masterChefContract, pid) => {\n  const gasPrice = getGasPrice()\n  if (pid === 0) {\n    const tx = await masterChefContract.leaveStaking('0', { ...options, gasPrice })\n    const receipt = await tx.wait()\n    return receipt.status\n  }\n\n  const tx = await masterChefContract.deposit(pid, '0', { ...options, gasPrice })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\n      console.info(txHash)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { formatBigNumber } from 'utils/formatBalance'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n\n    const balanceUnits = parseUnits(balance, decimals)\n    return formatBigNumber(balanceUnits, decimals, decimals)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","// 1 day, 7 days, 30 days, 1 year, 5 years\nconst DAYS_TO_CALCULATE_AGAINST = [1, 7, 30, 365, 1825]\n\n/**\n *\n * @param principalInUSD - amount user wants to invest in USD\n * @param apr - farm or pool apr as percentage. If its farm APR its only cake rewards APR without LP rewards APR\n * @param earningTokenPrice - price of reward token\n * @param compoundFrequency - how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @param performanceFee - performance fee as percentage\n * @returns an array of token values earned as interest, with each element representing interest earned over a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */\nexport const getInterestBreakdown = ({\n  principalInUSD,\n  apr,\n  earningTokenPrice,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}: {\n  principalInUSD: number\n  apr: number\n  earningTokenPrice: number\n  compoundFrequency?: number\n  performanceFee?: number\n}) => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const aprAsDecimal = apr / 100\n\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  // and also cause rounding errors\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0\n  const roundingDecimalsNew = isHighValueToken ? 5 : 3\n\n  return DAYS_TO_CALCULATE_AGAINST.map((days) => {\n    const daysAsDecimalOfYear = days / 365\n    // Calculate the starting TOKEN balance with a dollar balance of principalInUSD.\n    const principal = principalInUSD / earningTokenPrice\n    let interestEarned = principal * aprAsDecimal * (days / 365)\n    if (timesCompounded !== 0) {\n      // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n      const accruedAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n      // To get the TOKEN amount earned, deduct the amount after compounding (accruedAmount) from the starting TOKEN balance (principal)\n      interestEarned = accruedAmount - principal\n      if (performanceFee) {\n        const performanceFeeAsDecimal = performanceFee / 100\n        const performanceFeeAsAmount = interestEarned * performanceFeeAsDecimal\n        interestEarned -= performanceFeeAsAmount\n      }\n    }\n    return parseFloat(interestEarned.toFixed(roundingDecimalsNew))\n  })\n}\n\n/**\n * @param interest how much USD amount you aim to make\n * @param apr APR of farm/pool\n * @param compoundingFrequency how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @returns an array of principal values needed to reach target interest, with each element representing principal needed for a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */\nexport const getPrincipalForInterest = (\n  interest: number,\n  apr: number,\n  compoundingFrequency: number,\n  performanceFee = 0,\n) => {\n  return DAYS_TO_CALCULATE_AGAINST.map((days) => {\n    const apyAsDecimal = getApy(apr, compoundingFrequency, days, performanceFee)\n    // console.log('inside', interest, apyAsDecimal)\n    // const apyAsBN = new BigNumber(apyAsDecimal).decimalPlaces(6, BigNumber.ROUND_DOWN).toNumber()\n    return parseFloat((interest / apyAsDecimal).toFixed(2))\n  })\n}\n\n/**\n * Given APR returns APY\n * @param apr APR as percentage\n * @param compoundFrequency how many compounds per day\n * @param days if other than 365 adjusts (A)PY for period less than a year\n * @param performanceFee performance fee as percentage\n * @returns APY as decimal\n */\nexport const getApy = (apr: number, compoundFrequency = 1, days = 365, performanceFee = 0) => {\n  const daysAsDecimalOfYear = days / 365\n  const aprAsDecimal = apr / 100\n  const timesCompounded = 365 * compoundFrequency\n  let apyAsDecimal = (apr / 100) * daysAsDecimalOfYear\n  if (timesCompounded > 0) {\n    apyAsDecimal = (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear) - 1\n  }\n  if (performanceFee) {\n    const performanceFeeAsDecimal = performanceFee / 100\n    const takenAsPerformanceFee = apyAsDecimal * performanceFeeAsDecimal\n    apyAsDecimal -= takenAsPerformanceFee\n  }\n  return apyAsDecimal\n}\n\nexport const getRoi = ({ amountEarned, amountInvested }: { amountEarned: number; amountInvested: number }) => {\n  if (amountInvested === 0) {\n    return 0\n  }\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Box, Text, ExpandableLabel, LinkExternal, Grid, HelpIcon, useTooltip } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getApy } from 'utils/compoundApyHelpers'\n\nconst Footer = styled(Flex)`\n  width: 100%;\n  background: ${({ theme }) => theme.colors.dropdown};\n`\n\nconst BulletList = styled.ul`\n  list-style-type: none;\n  margin-top: 16px;\n  padding: 0;\n  li {\n    margin: 0;\n    padding: 0;\n  }\n  li::before {\n    content: '•';\n    margin-right: 4px;\n    color: ${({ theme }) => theme.colors.textSubtle};\n  }\n  li::marker {\n    font-size: 12px;\n  }\n`\n\ninterface RoiCalculatorFooterProps {\n  isFarm: boolean\n  apr: number\n  displayApr: string\n  autoCompoundFrequency: number\n  multiplier: string\n  linkLabel: string\n  linkHref: string\n  performanceFee: number\n}\n\nconst RoiCalculatorFooter: React.FC<RoiCalculatorFooterProps> = ({\n  isFarm,\n  apr,\n  displayApr,\n  autoCompoundFrequency,\n  multiplier,\n  linkLabel,\n  linkHref,\n  performanceFee,\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false)\n  const { t } = useTranslation()\n  const {\n    targetRef: multiplierRef,\n    tooltip: multiplierTooltip,\n    tooltipVisible: multiplierTooltipVisible,\n  } = useTooltip(\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of MARIACHI rewards each farm receives, as a proportion of the MARIACHI produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 MARIACHI per block, a 40x farm would receive 40 MARIACHI per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>,\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  const gridRowCount = isFarm ? 4 : 2\n  const apy = (getApy(apr, autoCompoundFrequency > 0 ? autoCompoundFrequency : 1, 365, performanceFee) * 100).toFixed(2)\n\n  return (\n    <Footer p=\"16px\" flexDirection=\"column\">\n      <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded((prev) => !prev)}>\n        {isExpanded ? t('Hide') : t('Details')}\n      </ExpandableLabel>\n      {isExpanded && (\n        <Box px=\"8px\">\n          <Grid gridTemplateColumns=\"2.5fr 1fr\" gridRowGap=\"8px\" gridTemplateRows={`repeat(${gridRowCount}, auto)`}>\n            {isFarm && (\n              <>\n                <Text color=\"textSubtle\" small>\n                  {t('APR (incl. LP rewards)')}\n                </Text>\n                <Text small textAlign=\"right\">\n                  {displayApr}%\n                </Text>\n              </>\n            )}\n            <Text color=\"textSubtle\" small>\n              {isFarm ? t('Base APR (MARIACHI yield only)') : t('APR')}\n            </Text>\n            <Text small textAlign=\"right\">\n              {apr.toFixed(2)}%\n            </Text>\n            <Text color=\"textSubtle\" small>\n              {t('APY (%compoundTimes%x daily compound)', {\n                compoundTimes: autoCompoundFrequency > 0 ? autoCompoundFrequency : 1,\n              })}\n            </Text>\n            <Text small textAlign=\"right\">\n              {apy}%\n            </Text>\n            {isFarm && (\n              <>\n                <Text color=\"textSubtle\" small>\n                  {t('Farm Multiplier')}\n                </Text>\n                <Flex justifyContent=\"flex-end\" alignItems=\"flex-end\">\n                  <Text small textAlign=\"right\" mr=\"4px\">\n                    {multiplier}\n                  </Text>\n                  <span ref={multiplierRef}>\n                    <HelpIcon color=\"textSubtle\" width=\"16px\" height=\"16px\" />\n                  </span>\n                  {multiplierTooltipVisible && multiplierTooltip}\n                </Flex>\n              </>\n            )}\n          </Grid>\n          <BulletList>\n            <li>\n              <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\n                {t('Calculated based on current rates.')}\n              </Text>\n            </li>\n            {isFarm && (\n              <li>\n                <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\n                  {t('LP rewards: 0.17% trading fees, distributed proportionally among LP token holders.')}\n                </Text>\n              </li>\n            )}\n            <li>\n              <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\n                {t(\n                  'All figures are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n                )}\n              </Text>\n            </li>\n            {performanceFee > 0 && (\n              <li>\n                <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\n                  {t('All estimated rates take into account this pool’s %fee%% performance fee', {\n                    fee: performanceFee,\n                  })}\n                </Text>\n              </li>\n            )}\n          </BulletList>\n          <Flex justifyContent=\"center\" mt=\"24px\">\n            <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n          </Flex>\n        </Box>\n      )}\n    </Footer>\n  )\n}\n\nexport default RoiCalculatorFooter\n","import React, { useRef, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Text, Input, CheckmarkIcon, PencilIcon, IconButton } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { CalculatorMode, RoiCalculatorReducerState } from './useRoiCalculatorReducer'\n\nconst MILLION = 1000000\nconst TRILLION = 1000000000000\n\nconst RoiCardWrapper = styled(Box)`\n  background: linear-gradient(180deg, #53dee9, #7645d9);\n  padding: 1px;\n  width: 100%;\n  border-radius: ${({ theme }) => theme.radii.default};\n`\n\nconst RoiCardInner = styled(Box)`\n  height: 120px;\n  padding: 24px;\n  border-radius: ${({ theme }) => theme.radii.default};\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n`\n\nconst RoiInputContainer = styled(Box)`\n  position: relative;\n  & > input {\n    padding-left: 28px;\n    max-width: 70%;\n  }\n  &:before {\n    position: absolute;\n    content: '$';\n    color: ${({ theme }) => theme.colors.textSubtle};\n    left: 16px;\n    top: 8px;\n  }\n`\n\nconst RoiDisplayContainer = styled(Flex)`\n  max-width: 82%;\n  margin-right: 8px;\n`\n\nconst RoiDollarAmount = styled(Text)<{ fadeOut: boolean }>`\n  position: relative;\n  overflow-x: auto;\n  &::-webkit-scrollbar {\n    height: 0px;\n  }\n\n  ${({ fadeOut, theme }) =>\n    fadeOut &&\n    `\n      &:after {\n        background: linear-gradient(\n          to right,\n          ${theme.colors.background}00,\n          ${theme.colors.background}E6\n        );\n        content: '';\n        height: 100%;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: 0;\n        width: 40px;\n      }\n  `}\n`\n\ninterface RoiCardProps {\n  earningTokenSymbol: string\n  calculatorState: RoiCalculatorReducerState\n  setTargetRoi: (amount: string) => void\n  setCalculatorMode: (mode: CalculatorMode) => void\n}\n\nconst RoiCard: React.FC<RoiCardProps> = ({ earningTokenSymbol, calculatorState, setTargetRoi, setCalculatorMode }) => {\n  const [expectedRoi, setExpectedRoi] = useState('')\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const { roiUSD, roiTokens, roiPercentage } = calculatorState.data\n  const { mode } = calculatorState.controls\n\n  const { t } = useTranslation()\n\n  useEffect(() => {\n    if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI && inputRef.current) {\n      inputRef.current.focus()\n    }\n  }, [mode])\n\n  const onEnterEditing = () => {\n    setCalculatorMode(CalculatorMode.PRINCIPAL_BASED_ON_ROI)\n    setExpectedRoi(\n      roiUSD.toLocaleString('en', {\n        minimumFractionDigits: roiUSD > MILLION ? 0 : 2,\n        maximumFractionDigits: roiUSD > MILLION ? 0 : 2,\n      }),\n    )\n  }\n\n  const onExitRoiEditing = () => {\n    setCalculatorMode(CalculatorMode.ROI_BASED_ON_PRINCIPAL)\n  }\n  const handleExpectedRoiChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.currentTarget.validity.valid) {\n      const roiAsString = event.target.value.replace(/,/g, '.')\n      setTargetRoi(roiAsString)\n      setExpectedRoi(roiAsString)\n    }\n  }\n  return (\n    <RoiCardWrapper>\n      <RoiCardInner>\n        <Text fontSize=\"12px\" color=\"secondary\" bold textTransform=\"uppercase\">\n          {t('ROI at current rates')}\n        </Text>\n        <Flex justifyContent=\"space-between\" mt=\"4px\" height=\"36px\">\n          {mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI ? (\n            <>\n              <RoiInputContainer>\n                <Input\n                  ref={inputRef}\n                  type=\"text\"\n                  inputMode=\"decimal\"\n                  pattern=\"^[0-9]+[.,]?[0-9]*$\"\n                  scale=\"sm\"\n                  value={expectedRoi}\n                  placeholder=\"0.0\"\n                  onChange={handleExpectedRoiChange}\n                />\n              </RoiInputContainer>\n              <IconButton scale=\"sm\" variant=\"text\" onClick={onExitRoiEditing}>\n                <CheckmarkIcon color=\"primary\" />\n              </IconButton>\n            </>\n          ) : (\n            <>\n              <RoiDisplayContainer onClick={onEnterEditing}>\n                {/* Dollar sign is separate cause its not supposed to scroll with a number if number is huge */}\n                <Text fontSize=\"24px\" bold>\n                  $\n                </Text>\n                <RoiDollarAmount fontSize=\"24px\" bold fadeOut={roiUSD > TRILLION}>\n                  {roiUSD.toLocaleString('en', {\n                    minimumFractionDigits: roiUSD > MILLION ? 0 : 2,\n                    maximumFractionDigits: roiUSD > MILLION ? 0 : 2,\n                  })}\n                </RoiDollarAmount>\n              </RoiDisplayContainer>\n              <IconButton scale=\"sm\" variant=\"text\" onClick={onEnterEditing}>\n                <PencilIcon color=\"primary\" />\n              </IconButton>\n            </>\n          )}\n        </Flex>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          ~ {roiTokens} {earningTokenSymbol} (\n          {roiPercentage.toLocaleString('en', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n          %)\n        </Text>\n      </RoiCardInner>\n    </RoiCardWrapper>\n  )\n}\n\nexport default RoiCard\n","import React, { useState, useEffect } from 'react'\nimport { Flex, ArrowDownIcon, ArrowUpIcon } from 'uikit'\nimport styled, { keyframes } from 'styled-components'\nimport { CalculatorMode, RoiCalculatorReducerState } from './useRoiCalculatorReducer'\n\nconst rotate = keyframes`\n  0% {\n    transform: scale(1);\n    stroke-width: 0;\n  }\n  50% {\n    transform: scale(1.3);\n    stroke-width: 2;\n  }\n  100% {\n    transform: scale(1);\n    stroke-width: 0;\n  }\n`\n\nconst ArrowContainer = styled(Flex)`\n  & > svg {\n    animation: 0.2s ${rotate} linear;\n    stroke: ${({ theme }) => `${theme.colors.primary}3D`};\n    stroke-width: 0;\n  }\n`\n\ninterface AnimatedArrowProps {\n  calculatorState: RoiCalculatorReducerState\n}\n\nconst AnimatedArrow: React.FC<AnimatedArrowProps> = ({ calculatorState }) => {\n  const [key, setKey] = useState('roiArrow-0')\n  const { mode } = calculatorState.controls\n\n  // Trigger animation on state change\n  useEffect(() => {\n    setKey((prevKey) => {\n      const prevId = parseInt(prevKey.split('-')[1], 10)\n      return `roiArrow-${prevId + 1}`\n    })\n  }, [calculatorState])\n\n  return (\n    <ArrowContainer justifyContent=\"center\" my=\"24px\" key={key}>\n      {mode === CalculatorMode.ROI_BASED_ON_PRINCIPAL ? (\n        <ArrowDownIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n      ) : (\n        <ArrowUpIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n      )}\n    </ArrowContainer>\n  )\n}\n\nexport default AnimatedArrow\n","import React, { useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport {\n  Modal,\n  Text,\n  Button,\n  Flex,\n  ButtonMenu,\n  Checkbox,\n  BalanceInput,\n  HelpIcon,\n  ButtonMenuItem,\n  useTooltip,\n} from 'uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport RoiCalculatorFooter from './RoiCalculatorFooter'\nimport RoiCard from './RoiCard'\nimport useRoiCalculatorReducer, { CalculatorMode, EditingCurrency } from './useRoiCalculatorReducer'\nimport AnimatedArrow from './AnimatedArrow'\n\ninterface RoiCalculatorModalProps {\n  onDismiss?: () => void\n  onBack?: () => void\n  earningTokenPrice: number\n  apr: number\n  displayApr?: string\n  linkLabel: string\n  linkHref: string\n  stakingTokenBalance: BigNumber\n  stakingTokenSymbol: string\n  stakingTokenPrice: number\n  earningTokenSymbol?: string\n  multiplier?: string\n  autoCompoundFrequency?: number\n  performanceFee?: number\n  isFarm?: boolean\n  initialValue?: string\n}\n\nconst StyledModal = styled(Modal)`\n  width: 345px;\n  & > :nth-child(2) {\n    padding: 0;\n  }\n`\n\nconst ScrollableContainer = styled.div`\n  padding: 24px;\n  max-height: 500px;\n  overflow-y: auto;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-height: none;\n  }\n`\n\nconst FullWidthButtonMenu = styled(ButtonMenu)<{ disabled?: boolean }>`\n  width: 100%;\n\n  & > button {\n    width: 100%;\n  }\n\n  opacity: ${({ disabled }) => (disabled ? 0.5 : 1)};\n`\n\nconst RoiCalculatorModal: React.FC<RoiCalculatorModalProps> = ({\n  onDismiss,\n  onBack,\n  earningTokenPrice,\n  apr,\n  displayApr,\n  linkLabel,\n  linkHref,\n  stakingTokenBalance,\n  stakingTokenSymbol,\n  stakingTokenPrice,\n  multiplier,\n  initialValue,\n  earningTokenSymbol = 'MARIACHI',\n  autoCompoundFrequency = 0,\n  performanceFee = 0,\n  isFarm = false,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useActiveWeb3React()\n  const balanceInputRef = useRef<HTMLInputElement | null>(null)\n\n  const {\n    state,\n    setPrincipalFromUSDValue,\n    setPrincipalFromTokenValue,\n    setStakingDuration,\n    toggleCompounding,\n    toggleEditingCurrency,\n    setCompoundingFrequency,\n    setCalculatorMode,\n    setTargetRoi,\n  } = useRoiCalculatorReducer(stakingTokenPrice, earningTokenPrice, apr, autoCompoundFrequency, performanceFee)\n\n  const { compounding, activeCompoundingIndex, stakingDuration, editingCurrency } = state.controls\n  const { principalAsUSD, principalAsToken } = state.data\n\n  // Auto-focus input on opening modal\n  useEffect(() => {\n    if (balanceInputRef.current) {\n      balanceInputRef.current.focus()\n    }\n  }, [])\n\n  // If user comes to calculator from staking modal - initialize with whatever they put in there\n  useEffect(() => {\n    if (initialValue) {\n      setPrincipalFromTokenValue(initialValue)\n    }\n  }, [initialValue, setPrincipalFromTokenValue])\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    isFarm\n      ? t('“My Balance” here includes both LP Tokens in your wallet, and LP Tokens already staked in this farm.')\n      : t(\n          '“My Balance” here includes both %assetSymbol% in your wallet, and %assetSymbol% already staked in this pool.',\n          { assetSymbol: stakingTokenSymbol },\n        ),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  const onBalanceFocus = () => {\n    setCalculatorMode(CalculatorMode.ROI_BASED_ON_PRINCIPAL)\n  }\n\n  const editingUnit = editingCurrency === EditingCurrency.TOKEN ? stakingTokenSymbol : 'USD'\n  const editingValue = editingCurrency === EditingCurrency.TOKEN ? principalAsToken : principalAsUSD\n  const conversionUnit = editingCurrency === EditingCurrency.TOKEN ? 'USD' : stakingTokenSymbol\n  const conversionValue = editingCurrency === EditingCurrency.TOKEN ? principalAsUSD : principalAsToken\n  const onUserInput = editingCurrency === EditingCurrency.TOKEN ? setPrincipalFromTokenValue : setPrincipalFromUSDValue\n\n  return (\n    <StyledModal\n      title={t('ROI Calculator')}\n      onDismiss={onBack || onDismiss}\n      onBack={onBack ?? null}\n      headerBackground=\"gradients.cardHeader\"\n    >\n      <ScrollableContainer>\n        <Flex flexDirection=\"column\" mb=\"8px\">\n          <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n            {t('%asset% staked', { asset: stakingTokenSymbol })}\n          </Text>\n          <BalanceInput\n            currencyValue={`${conversionValue} ${conversionUnit}`}\n            innerRef={balanceInputRef}\n            placeholder=\"0.00\"\n            value={editingValue}\n            unit={editingUnit}\n            onUserInput={onUserInput}\n            switchEditingUnits={toggleEditingCurrency}\n            onFocus={onBalanceFocus}\n          />\n          <Flex justifyContent=\"space-between\" mt=\"8px\">\n            <Button\n              scale=\"xs\"\n              p=\"4px 16px\"\n              width=\"68px\"\n              variant=\"tertiary\"\n              onClick={() => setPrincipalFromUSDValue('100')}\n            >\n              $100\n            </Button>\n            <Button\n              scale=\"xs\"\n              p=\"4px 16px\"\n              width=\"68px\"\n              variant=\"tertiary\"\n              onClick={() => setPrincipalFromUSDValue('1000')}\n            >\n              $1000\n            </Button>\n            <Button\n              disabled={stakingTokenBalance.lte(0) || !account}\n              scale=\"xs\"\n              p=\"4px 16px\"\n              width=\"128px\"\n              variant=\"tertiary\"\n              onClick={() =>\n                setPrincipalFromUSDValue(getBalanceNumber(stakingTokenBalance.times(stakingTokenPrice)).toString())\n              }\n            >\n              {t('My Balance').toLocaleUpperCase()}\n            </Button>\n            <span ref={targetRef}>\n              <HelpIcon width=\"16px\" height=\"16px\" color=\"textSubtle\" />\n            </span>\n            {tooltipVisible && tooltip}\n          </Flex>\n          <Text mt=\"24px\" color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n            {t('Staked for')}\n          </Text>\n          <FullWidthButtonMenu activeIndex={stakingDuration} onItemClick={setStakingDuration} scale=\"sm\">\n            <ButtonMenuItem variant=\"tertiary\">{t('1D')}</ButtonMenuItem>\n            <ButtonMenuItem variant=\"tertiary\">{t('7D')}</ButtonMenuItem>\n            <ButtonMenuItem variant=\"tertiary\">{t('30D')}</ButtonMenuItem>\n            <ButtonMenuItem variant=\"tertiary\">{t('1Y')}</ButtonMenuItem>\n            <ButtonMenuItem variant=\"tertiary\">{t('5Y')}</ButtonMenuItem>\n          </FullWidthButtonMenu>\n          {autoCompoundFrequency === 0 && (\n            <>\n              <Text mt=\"24px\" color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n                {t('Compounding every')}\n              </Text>\n              <Flex alignItems=\"center\">\n                <Flex flex=\"1\">\n                  <Checkbox scale=\"sm\" checked={compounding} onChange={toggleCompounding} />\n                </Flex>\n                <Flex flex=\"6\">\n                  <FullWidthButtonMenu\n                    disabled={!compounding}\n                    activeIndex={activeCompoundingIndex}\n                    onItemClick={setCompoundingFrequency}\n                    scale=\"sm\"\n                  >\n                    <ButtonMenuItem>{t('1D')}</ButtonMenuItem>\n                    <ButtonMenuItem>{t('7D')}</ButtonMenuItem>\n                    <ButtonMenuItem>{t('14D')}</ButtonMenuItem>\n                    <ButtonMenuItem>{t('30D')}</ButtonMenuItem>\n                  </FullWidthButtonMenu>\n                </Flex>\n              </Flex>\n            </>\n          )}\n        </Flex>\n        <AnimatedArrow calculatorState={state} />\n        <Flex>\n          <RoiCard\n            earningTokenSymbol={earningTokenSymbol}\n            calculatorState={state}\n            setTargetRoi={setTargetRoi}\n            setCalculatorMode={setCalculatorMode}\n          />\n        </Flex>\n      </ScrollableContainer>\n      <RoiCalculatorFooter\n        isFarm={isFarm}\n        apr={apr}\n        displayApr={displayApr}\n        autoCompoundFrequency={autoCompoundFrequency}\n        multiplier={multiplier}\n        linkLabel={linkLabel}\n        linkHref={linkHref}\n        performanceFee={performanceFee}\n      />\n    </StyledModal>\n  )\n}\n\nexport default RoiCalculatorModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from 'uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  stakedBalance: BigNumber\n  multiplier?: string\n  lpPrice: BigNumber\n  lpLabel?: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  stakedBalance,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  multiplier,\n  displayApr,\n  lpPrice,\n  lpLabel,\n  apr,\n  addLiquidityUrl,\n  cakePrice,\n}) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const lpTokensToStake = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const usdToStake = lpTokensToStake.times(lpPrice)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: cakePrice.toNumber(),\n  })\n\n  const annualRoi = cakePrice.times(interestBreakdown[3])\n  const formattedAnnualRoi = formatNumber(\n    annualRoi.toNumber(),\n    annualRoi.gt(10000) ? 0 : 2,\n    annualRoi.gt(10000) ? 0 : 2,\n  )\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n        stakingTokenBalance={stakedBalance.plus(max)}\n        stakingTokenSymbol={tokenName}\n        stakingTokenPrice={lpPrice.toNumber()}\n        earningTokenPrice={cakePrice.toNumber()}\n        apr={apr}\n        multiplier={multiplier}\n        displayApr={displayApr}\n        linkHref={addLiquidityUrl}\n        isFarm\n        initialValue={val}\n        onBack={() => setShowRoiCalculator(false)}\n      />\n    )\n  }\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text mr=\"8px\" color=\"textSubtle\">\n          {t('Annual ROI at current rates')}:\n        </Text>\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n          <IconButton variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </AnnualRoiContainer>\n      </Flex>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from 'uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport useUnstakeFarms from 'hooks/useUnstakeFarms'\nimport useStakeFarms from 'hooks/useStakeFarms'\nimport { useAppDispatch } from 'state'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001'\n    }\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      multiplier={multiplier}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceMariachiCro } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from 'hooks/useHarvestFarm'\nimport { useAppDispatch } from 'state'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceMariachiCro()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'MARIACHI' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {pendingTx ? t('Harvesting') : t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from 'uikit'\nimport useApproveFarm from 'hooks/useApproveFarm'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC20 } from 'hooks/useContract'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && parseInt(allowance.toString()) > 0\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        apr={farm.apr}\n        lpLabel={lpLabel}\n        cakePrice={cakePrice}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          MARIACHI\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, IconButton, useModal, CalculateIcon } from 'uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport interface ApyButtonProps {\n  variant: 'text' | 'text-and-button'\n  pid: number\n  lpSymbol: string\n  lpLabel?: string\n  multiplier: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  variant,\n  pid,\n  lpLabel,\n  lpSymbol,\n  cakePrice,\n  apr,\n  multiplier,\n  displayApr,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\n      stakingTokenSymbol={lpSymbol}\n      stakingTokenPrice={parseFloat(lpPrice.toString())}\n      earningTokenPrice={parseFloat(cakePrice.toString())}\n      apr={apr}\n      multiplier={multiplier}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\n      {displayApr}%\n      {variant === 'text-and-button' && (\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\n          <CalculateIcon width=\"18px\" />\n        </IconButton>\n      )}\n    </ApyLabelContainer>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from 'uikit'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { Farm } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.isGreaterThanOrEqualTo(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.tokenSymbol === 'CAKE'\n\n  return (\n    <StyledCard isActive={isPromotedFarm}>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          token={farm.tokenSymbol}\n          quoteToken={farm.quoteTokenSymbol}\n        />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{t('APR')}:</Text>\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n              {farm.apr ? (\n                <ApyButton\n                  variant=\"text-and-button\"\n                  pid={farm.pid}\n                  lpSymbol={farm.lpSymbol}\n                  multiplier={farm.multiplier}\n                  lpLabel={lpLabel}\n                  cakePrice={cakePrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Earn')}:</Text>\n          <Text bold>MARIACHI</Text>\n        </Flex>\n        <CardActionsContainer farm={farm} lpLabel={lpLabel} account={account} cakePrice={cakePrice} />\n      </FarmCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            infoAddress={`/info/pool/${lpAddress}`}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport BigNumber from 'bignumber.js'\nimport { Skeleton } from 'uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  pid: number\n  lpLabel: string\n  lpSymbol: string\n  tokenAddress?: string\n  quoteTokenAddress?: string\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  pid,\n  lpLabel,\n  lpSymbol,\n  multiplier,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <ApyButton\n          variant={hideButton ? 'text' : 'text-and-button'}\n          pid={pid}\n          lpSymbol={lpSymbol}\n          lpLabel={lpLabel}\n          multiplier={multiplier}\n          cakePrice={cakePrice}\n          apr={originalValue}\n          displayApr={value}\n        />\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from 'uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenPairImage } from 'components/TokenImage'\nimport { useFarmUser } from 'state/hooks'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: string\n  quoteToken: string\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from 'uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Container>\n      {!isDesktop && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, HelpIcon, Skeleton, useTooltip } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of MARIACHI rewards each farm receives, as a proportion of the MARIACHI produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 MARIACHI per block, a 40x farm would receive 40 MARIACHI per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, HelpIcon, Skeleton, useTooltip } from 'uikit'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface WithdrawalFeeProps {\n  withdrawalFees: number\n}\n\nconst WithdrawalFeeWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst WithdrawalFee: React.FunctionComponent<WithdrawalFeeProps> = ({ withdrawalFees }) => {\n  const displayWithdrawalFee = withdrawalFees >= 0 ? `${withdrawalFees / 100}%` : <Skeleton width={30} />\n  const tooltipContent = (\n    <>\n      <Text>\n        The Withdrawal Fee represents the proportion of MARIACHI rewards each farm receives, as a proportion of the\n        MARIACHI produced each block.\n      </Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <WithdrawalFeeWrapper>{displayWithdrawalFee}</WithdrawalFeeWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default WithdrawalFee\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Skeleton } from 'uikit'\nimport BigNumber from 'bignumber.js'\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.isGreaterThanOrEqualTo(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React, { useState } from 'react'\nimport { Button, Heading, Skeleton, Text } from 'uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceMariachiCro } from 'state/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from 'hooks/useHarvestFarm'\nimport { useAppDispatch } from 'state'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceMariachiCro()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          MARIACHI\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {pendingTx ? t('Harvesting') : t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from 'uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC20 } from 'hooks/useContract'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from 'hooks/useUnstakeFarms'\nimport useStakeFarms from 'hooks/useStakeFarms'\nimport useApproveFarm from 'hooks/useApproveFarm'\nimport { useAppDispatch } from 'state'\nimport { useFarmUser, usePriceMariachiCro, useLpTokenPrice } from 'state/hooks'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  userDataReady,\n  displayApr,\n}) => {\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { stakedBalance, tokenBalance, allowance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const cakePrice = usePriceMariachiCro()\n\n  const isApproved = account && allowance && parseInt(allowance.toString()) > 0\n\n  const lpAddress = getAddress(lpAddresses)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(new BigNumber(stakedBalance))\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(new BigNumber(stakedBalance)).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={new BigNumber(stakedBalance)}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={new BigNumber(stakedBalance)} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (new BigNumber(stakedBalance).gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {new BigNumber(stakedBalance).gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(new BigNumber(stakedBalance)))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake')}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from 'uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanLink } from 'utils'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\nimport WithdrawalFee, { WithdrawalFeeProps } from '../WithdrawalFee'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  withdrawalFee: WithdrawalFeeProps\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  withdrawalFee,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanLink(lpAddress, 'address')\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>Withdrawal Fee</Text>\n          <WithdrawalFee {...withdrawalFee} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'withdrawalFee',\n    sortable: true,\n    label: 'Withdrawal Fee',\n  },\n  {\n    id: 7,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'withdrawalFee',\n    sortable: true,\n    label: 'Withdrawal Fee',\n  },\n  {\n    id: 7,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport WithdrawalFee, { WithdrawalFeeProps } from './WithdrawalFee'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  withdrawalFee: WithdrawalFeeProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  withdrawalFee: WithdrawalFee,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady, apr, farm, earned, withdrawalFee, liquidity, multiplier } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isDesktop, isMobile } = useMatchBreakpoints()\n\n  const isSmallerScreen = !isDesktop\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    const data = {\n      liquidity,\n      multiplier,\n      withdrawalFee,\n      earned,\n      farm,\n      apr,\n      details\n    }\n    if (!isMobile) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...apr} hideButton={isSmallerScreen} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...data[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label=\"EARNED\">\n                <Earned {...earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n  scroll-margin-top: 64px;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container id=\"farms-table\">\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem id=\"finished-farms-button\" as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from 'uikit'\nimport { ViewMode } from 'state/user/actions'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from 'uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport { QuoteToken } from 'config/constants/types'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\nimport { useFarms, usePriceCroUSDC, usePriceMariachiCro } from 'state/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst getDisplayApr = (cakeRewardsApr?: number) => {\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceMariachiCro()\n  const croPrice = usePriceCroUSDC()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 999 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter(\n    (farm) => farm.pid !== 999 && farm.multiplier === '0X' && !isArchivedPid(farm.pid),\n  )\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const userDataReady = !account || activeFarms.length > 0\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        const cakeRewardPerBlock = new BigNumber(farm.mariachiPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue\n        if (farm.isTokenOnly && farm.tokenAmount) {\n          totalValue = new BigNumber(farm.tokenAmount).times(farm.tokenPriceVsQuote)\n        } else {\n          totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n          if (farm.quoteTokenSymbol === QuoteToken.CRO) {\n            totalValue = totalValue.times(croPrice)\n          } else if (farm.quoteTokenSymbol === QuoteToken.MARIACHI) {\n            totalValue = totalValue.times(cakePrice)\n          }\n\n          if (farm.isExternal) {\n            const valuePerLp = totalValue.div(farm.lpInMaster)\n            totalValue = valuePerLp.times(farm.lpInVamp)\n          }\n        }\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apr: parseFloat(apy.toString()), liquidity: totalValue }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, croPrice, query],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n    return sortFarms(chosenFarms)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n  ])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token // CHOY CHANGE token.address\n    const quoteTokenAddress = quoteToken // CHOY CHANGE quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice: new BigNumber(cakePrice),\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      withdrawalFee: {\n        withdrawalFees: farm.userData.withdrawalFee ? parseInt(farm.userData.withdrawalFee.toString()) : 0,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr)}\n              cakePrice={new BigNumber(cakePrice)}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr)}\n              cakePrice={new BigNumber(cakePrice)}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr)}\n              cakePrice={new BigNumber(cakePrice)}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake LP tokens to earn MARIACHI. ¡Que chingón!')}\n        </Heading>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle\n                id=\"staked-only-farms\"\n                checked={stakedOnly}\n                onChange={() => setStakedOnly(!stakedOnly)}\n                scale=\"sm\"\n              />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onOptionChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport { formatUnits } from 'ethers/lib/utils'\nimport { getLanguageCodeFromLS } from 'contexts/Localization/helpers'\nimport { BIG_TEN } from './bigNumber'\n\n/**\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\n */\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18) => {\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals))\n}\n\nexport const getBalanceAmount = (amount: BigNumber, decimals = 18) => {\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals))\n}\n\n/**\n * This function is not really necessary but is used throughout the site.\n */\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  return getBalanceAmount(balance, decimals).toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, displayDecimals?: number) => {\n  return getBalanceAmount(balance, decimals).toFixed(displayDecimals)\n}\n\nexport const formatNumber = (number: number, minPrecision = 2, maxPrecision = 2) => {\n  const options = {\n    minimumFractionDigits: minPrecision,\n    maximumFractionDigits: maxPrecision,\n  }\n  return number.toLocaleString(undefined, options)\n}\n\n/**\n * Method to format the display of wei given an ethers.BigNumber object\n * Note: does NOT round\n */\nexport const formatBigNumber = (number: ethers.BigNumber, displayDecimals = 18, decimals = 18) => {\n  const remainder = number.mod(ethers.BigNumber.from(10).pow(decimals - displayDecimals))\n  return formatUnits(number.sub(remainder), decimals)\n}\n\n/**\n * Method to format the display of wei given an ethers.BigNumber object with toFixed\n * Note: rounds\n */\nexport const formatBigNumberToFixed = (number: ethers.BigNumber, displayDecimals = 18, decimals = 18) => {\n  const formattedString = formatUnits(number, decimals)\n  return (+formattedString).toFixed(displayDecimals)\n}\n\n/**\n * Formats a FixedNumber like BigNumber\n * i.e. Formats 9763410526137450427.1196 into 9.763 (3 display decimals)\n */\nexport const formatFixedNumber = (number: ethers.FixedNumber, displayDecimals = 18, decimals = 18) => {\n  // Remove decimal\n  const [leftSide] = number.toString().split('.')\n  return formatBigNumber(ethers.BigNumber.from(leftSide), displayDecimals, decimals)\n}\n\nexport const formatLocalisedCompactNumber = (number: number): string => {\n  const codeFromStorage = getLanguageCodeFromLS()\n  return new Intl.NumberFormat(codeFromStorage, {\n    notation: 'compact',\n    compactDisplay: 'long',\n    maximumSignificantDigits: 2,\n  }).format(number)\n}\n\nexport default formatLocalisedCompactNumber\n","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from 'uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      <CountUp\n        start={previousValue.current}\n        end={value}\n        prefix={prefix}\n        suffix={unit}\n        decimals={decimals}\n        duration={1}\n        separator=\",\"\n      />\n    </Text>\n  )\n}\n\nexport default Balance\n"],"sourceRoot":""}